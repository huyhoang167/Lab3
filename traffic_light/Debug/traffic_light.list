
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d4  080030d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080030d4  080030d4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d4  080030d4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000064  08003140  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003140  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093d5  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019da  00000000  00000000  00029462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169f2  00000000  00000000  0002c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad77  00000000  00000000  00042bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824ac  00000000  00000000  0004d969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfe15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002910  00000000  00000000  000cfe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800309c 	.word	0x0800309c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800309c 	.word	0x0800309c

0800014c <subKeyProcess1>:
int button2_flag_for_hold = 0;
// Set thoi gian cho giu nut nhan
int TimeOutForKeyPress1 =  100;
int TimeOutForKeyPress2 =  100;
int TimeOutForKeyPress3 =  100;
void subKeyProcess1(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess1+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000080 	.word	0x20000080

08000164 <subKeyProcess2>:
void subKeyProcess2(){
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <subKeyProcess2+0x14>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000084 	.word	0x20000084

0800017c <subKeyProcess3>:
void subKeyProcess3(){
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <subKeyProcess3+0x14>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000088 	.word	0x20000088

08000194 <isButtonPressed1>:
// Kiem tra nut nhan tha
int isButtonPressed1(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButtonPressed1+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButtonPressed1+0x16>
		button1_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButtonPressed1+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButtonPressed1+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <isButtonPressed2>:
int isButtonPressed2(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButtonPressed2+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButtonPressed2+0x16>
		button2_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButtonPressed2+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButtonPressed2+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000084 	.word	0x20000084

080001dc <isButtonPressed3>:
int isButtonPressed3(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <isButtonPressed3+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <isButtonPressed3+0x16>
		button3_flag = 0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <isButtonPressed3+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <isButtonPressed3+0x18>
	}
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000088 	.word	0x20000088

08000200 <isButtonHold2>:
// Kiem tra nut nhan de
int isButtonHold2(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	if (button2_flag_for_hold == 1){
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <isButtonHold2+0x20>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d104      	bne.n	8000216 <isButtonHold2+0x16>
		button2_flag_for_hold = 0;
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <isButtonHold2+0x20>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		return 1;
 8000212:	2301      	movs	r3, #1
 8000214:	e000      	b.n	8000218 <isButtonHold2+0x18>
	}
	return 0;
 8000216:	2300      	movs	r3, #0
}
 8000218:	4618      	mov	r0, r3
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	2000008c 	.word	0x2000008c

08000224 <getKeyInput2>:
void getKeyInput2(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <getKeyInput2+0xa0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a26      	ldr	r2, [pc, #152]	; (80002c8 <getKeyInput2+0xa4>)
 800022e:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 8000230:	4b26      	ldr	r3, [pc, #152]	; (80002cc <getKeyInput2+0xa8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a23      	ldr	r2, [pc, #140]	; (80002c4 <getKeyInput2+0xa0>)
 8000236:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	4824      	ldr	r0, [pc, #144]	; (80002d0 <getKeyInput2+0xac>)
 800023e:	f001 feed 	bl	800201c <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	4b21      	ldr	r3, [pc, #132]	; (80002cc <getKeyInput2+0xa8>)
 8000248:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 800024a:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <getKeyInput2+0xa0>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <getKeyInput2+0xa8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	429a      	cmp	r2, r3
 8000254:	d134      	bne.n	80002c0 <getKeyInput2+0x9c>
 8000256:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <getKeyInput2+0xa0>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <getKeyInput2+0xa4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	429a      	cmp	r2, r3
 8000260:	d12e      	bne.n	80002c0 <getKeyInput2+0x9c>
    if (KeyReg6 != KeyReg7){
 8000262:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <getKeyInput2+0xa4>)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <getKeyInput2+0xb0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	429a      	cmp	r2, r3
 800026c:	d00d      	beq.n	800028a <getKeyInput2+0x66>
      KeyReg7 = KeyReg6;
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <getKeyInput2+0xa4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <getKeyInput2+0xb0>)
 8000274:	6013      	str	r3, [r2, #0]

      if (KeyReg7 == PRESSED_STATE){
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <getKeyInput2+0xb0>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d120      	bne.n	80002c0 <getKeyInput2+0x9c>
        TimeOutForKeyPress2 = 100; // Gan thoi gian 1s
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <getKeyInput2+0xb4>)
 8000280:	2264      	movs	r2, #100	; 0x64
 8000282:	601a      	str	r2, [r3, #0]
        subKeyProcess2();
 8000284:	f7ff ff6e 	bl	8000164 <subKeyProcess2>
        	// Gan thoi gian 1s cho viec xet flag nhan giu
            TimeOutForKeyPress2 = 100;
        }
    }
  }
}
 8000288:	e01a      	b.n	80002c0 <getKeyInput2+0x9c>
       TimeOutForKeyPress2 --;
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <getKeyInput2+0xb4>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <getKeyInput2+0xb4>)
 8000292:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress2 == 0){
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <getKeyInput2+0xb4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d111      	bne.n	80002c0 <getKeyInput2+0x9c>
        	if (KeyReg4 == NORMAL_STATE){
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <getKeyInput2+0xa8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d107      	bne.n	80002b4 <getKeyInput2+0x90>
        		KeyReg7 = KeyReg4;
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <getKeyInput2+0xa8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <getKeyInput2+0xb0>)
 80002aa:	6013      	str	r3, [r2, #0]
        		button2_flag_for_hold = 0;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <getKeyInput2+0xb8>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	e002      	b.n	80002ba <getKeyInput2+0x96>
            button2_flag_for_hold = 1;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <getKeyInput2+0xb8>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
            TimeOutForKeyPress2 = 100;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <getKeyInput2+0xb4>)
 80002bc:	2264      	movs	r2, #100	; 0x64
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000014 	.word	0x20000014
 80002c8:	20000018 	.word	0x20000018
 80002cc:	20000010 	.word	0x20000010
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	2000001c 	.word	0x2000001c
 80002d8:	20000034 	.word	0x20000034
 80002dc:	2000008c 	.word	0x2000008c

080002e0 <getKeyInput1>:
void getKeyInput1(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <getKeyInput1+0x84>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1f      	ldr	r2, [pc, #124]	; (8000368 <getKeyInput1+0x88>)
 80002ea:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <getKeyInput1+0x8c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <getKeyInput1+0x84>)
 80002f2:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	481d      	ldr	r0, [pc, #116]	; (8000370 <getKeyInput1+0x90>)
 80002fa:	f001 fe8f 	bl	800201c <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	4b1a      	ldr	r3, [pc, #104]	; (800036c <getKeyInput1+0x8c>)
 8000304:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <getKeyInput1+0x84>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <getKeyInput1+0x8c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	429a      	cmp	r2, r3
 8000310:	d125      	bne.n	800035e <getKeyInput1+0x7e>
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <getKeyInput1+0x84>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <getKeyInput1+0x88>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	429a      	cmp	r2, r3
 800031c:	d11f      	bne.n	800035e <getKeyInput1+0x7e>
    if (KeyReg2 != KeyReg3){
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <getKeyInput1+0x88>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <getKeyInput1+0x94>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	429a      	cmp	r2, r3
 8000328:	d00d      	beq.n	8000346 <getKeyInput1+0x66>
      KeyReg3 = KeyReg2;
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <getKeyInput1+0x88>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a11      	ldr	r2, [pc, #68]	; (8000374 <getKeyInput1+0x94>)
 8000330:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <getKeyInput1+0x94>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d111      	bne.n	800035e <getKeyInput1+0x7e>
        TimeOutForKeyPress1 = 100;
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <getKeyInput1+0x98>)
 800033c:	2264      	movs	r2, #100	; 0x64
 800033e:	601a      	str	r2, [r3, #0]
        subKeyProcess1();
 8000340:	f7ff ff04 	bl	800014c <subKeyProcess1>
        if (TimeOutForKeyPress1 == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 8000344:	e00b      	b.n	800035e <getKeyInput1+0x7e>
       TimeOutForKeyPress1 --;
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <getKeyInput1+0x98>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <getKeyInput1+0x98>)
 800034e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress1 == 0){
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <getKeyInput1+0x98>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d102      	bne.n	800035e <getKeyInput1+0x7e>
          KeyReg3 = NORMAL_STATE;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <getKeyInput1+0x94>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000004 	.word	0x20000004
 8000368:	20000008 	.word	0x20000008
 800036c:	20000000 	.word	0x20000000
 8000370:	40011000 	.word	0x40011000
 8000374:	2000000c 	.word	0x2000000c
 8000378:	20000030 	.word	0x20000030

0800037c <getKeyInput3>:
void getKeyInput3(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <getKeyInput3+0x84>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a1f      	ldr	r2, [pc, #124]	; (8000404 <getKeyInput3+0x88>)
 8000386:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <getKeyInput3+0x8c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <getKeyInput3+0x84>)
 800038e:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000394:	481d      	ldr	r0, [pc, #116]	; (800040c <getKeyInput3+0x90>)
 8000396:	f001 fe41 	bl	800201c <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <getKeyInput3+0x8c>)
 80003a0:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <getKeyInput3+0x84>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <getKeyInput3+0x8c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d125      	bne.n	80003fa <getKeyInput3+0x7e>
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <getKeyInput3+0x84>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <getKeyInput3+0x88>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d11f      	bne.n	80003fa <getKeyInput3+0x7e>
    if (KeyReg10 != KeyReg11){
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <getKeyInput3+0x88>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <getKeyInput3+0x94>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d00d      	beq.n	80003e2 <getKeyInput3+0x66>
      KeyReg11 = KeyReg10;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <getKeyInput3+0x88>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a11      	ldr	r2, [pc, #68]	; (8000410 <getKeyInput3+0x94>)
 80003cc:	6013      	str	r3, [r2, #0]

      if (KeyReg11 == PRESSED_STATE){
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <getKeyInput3+0x94>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d111      	bne.n	80003fa <getKeyInput3+0x7e>
        TimeOutForKeyPress3 = 100;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <getKeyInput3+0x98>)
 80003d8:	2264      	movs	r2, #100	; 0x64
 80003da:	601a      	str	r2, [r3, #0]
        subKeyProcess3();
 80003dc:	f7ff fece 	bl	800017c <subKeyProcess3>
        if (TimeOutForKeyPress3 == 0){
            KeyReg11 = NORMAL_STATE;
        }
    }
  }
}
 80003e0:	e00b      	b.n	80003fa <getKeyInput3+0x7e>
       TimeOutForKeyPress3 --;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <getKeyInput3+0x98>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <getKeyInput3+0x98>)
 80003ea:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress3 == 0){
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <getKeyInput3+0x98>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d102      	bne.n	80003fa <getKeyInput3+0x7e>
            KeyReg11 = NORMAL_STATE;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <getKeyInput3+0x94>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000024 	.word	0x20000024
 8000404:	20000028 	.word	0x20000028
 8000408:	20000020 	.word	0x20000020
 800040c:	40010c00 	.word	0x40010c00
 8000410:	2000002c 	.word	0x2000002c
 8000414:	20000038 	.word	0x20000038

08000418 <updateBuffer>:
#include "software_timer.h"
#include "global.h"
#include "main.h"
int  index_led = 0;
int led_buffer[4];
void updateBuffer(int second1, int second2){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
	  int a = second1%10;
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <updateBuffer+0x80>)
 8000426:	fb83 1302 	smull	r1, r3, r3, r2
 800042a:	1099      	asrs	r1, r3, #2
 800042c:	17d3      	asrs	r3, r2, #31
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	460b      	mov	r3, r1
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	440b      	add	r3, r1
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	60fb      	str	r3, [r7, #12]
	  second1 = second1/10;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a16      	ldr	r2, [pc, #88]	; (8000498 <updateBuffer+0x80>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	1092      	asrs	r2, r2, #2
 8000446:	17db      	asrs	r3, r3, #31
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	607b      	str	r3, [r7, #4]
	  led_buffer[0]= second1;
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <updateBuffer+0x84>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6013      	str	r3, [r2, #0]
	  led_buffer[1] = a;
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <updateBuffer+0x84>)
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	6053      	str	r3, [r2, #4]
	  int b = second2%10;
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <updateBuffer+0x80>)
 800045c:	fb83 1302 	smull	r1, r3, r3, r2
 8000460:	1099      	asrs	r1, r3, #2
 8000462:	17d3      	asrs	r3, r2, #31
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	460b      	mov	r3, r1
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	440b      	add	r3, r1
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	60bb      	str	r3, [r7, #8]
	  second2 = second2/10;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <updateBuffer+0x80>)
 8000476:	fb82 1203 	smull	r1, r2, r2, r3
 800047a:	1092      	asrs	r2, r2, #2
 800047c:	17db      	asrs	r3, r3, #31
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	603b      	str	r3, [r7, #0]
	  led_buffer[2]= second2;
 8000482:	4a06      	ldr	r2, [pc, #24]	; (800049c <updateBuffer+0x84>)
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	6093      	str	r3, [r2, #8]
	  led_buffer[3] = b;
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <updateBuffer+0x84>)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	60d3      	str	r3, [r2, #12]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	66666667 	.word	0x66666667
 800049c:	200000b4 	.word	0x200000b4

080004a0 <Display7SEG>:
void Display7SEG(int count){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b09      	cmp	r3, #9
 80004ac:	f200 8180 	bhi.w	80007b0 <Display7SEG+0x310>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <Display7SEG+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	08000529 	.word	0x08000529
 80004c0:	08000571 	.word	0x08000571
 80004c4:	080005b9 	.word	0x080005b9
 80004c8:	08000601 	.word	0x08000601
 80004cc:	08000649 	.word	0x08000649
 80004d0:	08000691 	.word	0x08000691
 80004d4:	080006d9 	.word	0x080006d9
 80004d8:	08000721 	.word	0x08000721
 80004dc:	08000769 	.word	0x08000769
	switch (count) {
		case 0:
			HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	48b5      	ldr	r0, [pc, #724]	; (80007bc <Display7SEG+0x31c>)
 80004e6:	f001 fdb0 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	48b3      	ldr	r0, [pc, #716]	; (80007bc <Display7SEG+0x31c>)
 80004f0:	f001 fdab 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	48b0      	ldr	r0, [pc, #704]	; (80007bc <Display7SEG+0x31c>)
 80004fa:	f001 fda6 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	48ae      	ldr	r0, [pc, #696]	; (80007bc <Display7SEG+0x31c>)
 8000504:	f001 fda1 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	48ab      	ldr	r0, [pc, #684]	; (80007bc <Display7SEG+0x31c>)
 800050e:	f001 fd9c 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	48a9      	ldr	r0, [pc, #676]	; (80007bc <Display7SEG+0x31c>)
 8000518:	f001 fd97 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48a6      	ldr	r0, [pc, #664]	; (80007bc <Display7SEG+0x31c>)
 8000522:	f001 fd92 	bl	800204a <HAL_GPIO_WritePin>
			break;
 8000526:	e144      	b.n	80007b2 <Display7SEG+0x312>
		case 1:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	48a3      	ldr	r0, [pc, #652]	; (80007bc <Display7SEG+0x31c>)
 800052e:	f001 fd8c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	48a1      	ldr	r0, [pc, #644]	; (80007bc <Display7SEG+0x31c>)
 8000538:	f001 fd87 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	489e      	ldr	r0, [pc, #632]	; (80007bc <Display7SEG+0x31c>)
 8000542:	f001 fd82 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	489c      	ldr	r0, [pc, #624]	; (80007bc <Display7SEG+0x31c>)
 800054c:	f001 fd7d 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4899      	ldr	r0, [pc, #612]	; (80007bc <Display7SEG+0x31c>)
 8000556:	f001 fd78 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	4897      	ldr	r0, [pc, #604]	; (80007bc <Display7SEG+0x31c>)
 8000560:	f001 fd73 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4894      	ldr	r0, [pc, #592]	; (80007bc <Display7SEG+0x31c>)
 800056a:	f001 fd6e 	bl	800204a <HAL_GPIO_WritePin>
				break;
 800056e:	e120      	b.n	80007b2 <Display7SEG+0x312>
		case 2:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	4891      	ldr	r0, [pc, #580]	; (80007bc <Display7SEG+0x31c>)
 8000576:	f001 fd68 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	488f      	ldr	r0, [pc, #572]	; (80007bc <Display7SEG+0x31c>)
 8000580:	f001 fd63 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	2104      	movs	r1, #4
 8000588:	488c      	ldr	r0, [pc, #560]	; (80007bc <Display7SEG+0x31c>)
 800058a:	f001 fd5e 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	488a      	ldr	r0, [pc, #552]	; (80007bc <Display7SEG+0x31c>)
 8000594:	f001 fd59 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4887      	ldr	r0, [pc, #540]	; (80007bc <Display7SEG+0x31c>)
 800059e:	f001 fd54 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4885      	ldr	r0, [pc, #532]	; (80007bc <Display7SEG+0x31c>)
 80005a8:	f001 fd4f 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4882      	ldr	r0, [pc, #520]	; (80007bc <Display7SEG+0x31c>)
 80005b2:	f001 fd4a 	bl	800204a <HAL_GPIO_WritePin>
				break;
 80005b6:	e0fc      	b.n	80007b2 <Display7SEG+0x312>
		case 3:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	487f      	ldr	r0, [pc, #508]	; (80007bc <Display7SEG+0x31c>)
 80005be:	f001 fd44 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2102      	movs	r1, #2
 80005c6:	487d      	ldr	r0, [pc, #500]	; (80007bc <Display7SEG+0x31c>)
 80005c8:	f001 fd3f 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	487a      	ldr	r0, [pc, #488]	; (80007bc <Display7SEG+0x31c>)
 80005d2:	f001 fd3a 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4878      	ldr	r0, [pc, #480]	; (80007bc <Display7SEG+0x31c>)
 80005dc:	f001 fd35 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2110      	movs	r1, #16
 80005e4:	4875      	ldr	r0, [pc, #468]	; (80007bc <Display7SEG+0x31c>)
 80005e6:	f001 fd30 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	4873      	ldr	r0, [pc, #460]	; (80007bc <Display7SEG+0x31c>)
 80005f0:	f001 fd2b 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	4870      	ldr	r0, [pc, #448]	; (80007bc <Display7SEG+0x31c>)
 80005fa:	f001 fd26 	bl	800204a <HAL_GPIO_WritePin>
				break;
 80005fe:	e0d8      	b.n	80007b2 <Display7SEG+0x312>
		case 4:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	486d      	ldr	r0, [pc, #436]	; (80007bc <Display7SEG+0x31c>)
 8000606:	f001 fd20 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	486b      	ldr	r0, [pc, #428]	; (80007bc <Display7SEG+0x31c>)
 8000610:	f001 fd1b 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4868      	ldr	r0, [pc, #416]	; (80007bc <Display7SEG+0x31c>)
 800061a:	f001 fd16 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	2108      	movs	r1, #8
 8000622:	4866      	ldr	r0, [pc, #408]	; (80007bc <Display7SEG+0x31c>)
 8000624:	f001 fd11 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4863      	ldr	r0, [pc, #396]	; (80007bc <Display7SEG+0x31c>)
 800062e:	f001 fd0c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4861      	ldr	r0, [pc, #388]	; (80007bc <Display7SEG+0x31c>)
 8000638:	f001 fd07 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	485e      	ldr	r0, [pc, #376]	; (80007bc <Display7SEG+0x31c>)
 8000642:	f001 fd02 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000646:	e0b4      	b.n	80007b2 <Display7SEG+0x312>
		case 5:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	485b      	ldr	r0, [pc, #364]	; (80007bc <Display7SEG+0x31c>)
 800064e:	f001 fcfc 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2102      	movs	r1, #2
 8000656:	4859      	ldr	r0, [pc, #356]	; (80007bc <Display7SEG+0x31c>)
 8000658:	f001 fcf7 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4856      	ldr	r0, [pc, #344]	; (80007bc <Display7SEG+0x31c>)
 8000662:	f001 fcf2 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	4854      	ldr	r0, [pc, #336]	; (80007bc <Display7SEG+0x31c>)
 800066c:	f001 fced 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4851      	ldr	r0, [pc, #324]	; (80007bc <Display7SEG+0x31c>)
 8000676:	f001 fce8 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	484f      	ldr	r0, [pc, #316]	; (80007bc <Display7SEG+0x31c>)
 8000680:	f001 fce3 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	484c      	ldr	r0, [pc, #304]	; (80007bc <Display7SEG+0x31c>)
 800068a:	f001 fcde 	bl	800204a <HAL_GPIO_WritePin>
				break;
 800068e:	e090      	b.n	80007b2 <Display7SEG+0x312>
		case 6:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4849      	ldr	r0, [pc, #292]	; (80007bc <Display7SEG+0x31c>)
 8000696:	f001 fcd8 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4847      	ldr	r0, [pc, #284]	; (80007bc <Display7SEG+0x31c>)
 80006a0:	f001 fcd3 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4844      	ldr	r0, [pc, #272]	; (80007bc <Display7SEG+0x31c>)
 80006aa:	f001 fcce 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4842      	ldr	r0, [pc, #264]	; (80007bc <Display7SEG+0x31c>)
 80006b4:	f001 fcc9 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2110      	movs	r1, #16
 80006bc:	483f      	ldr	r0, [pc, #252]	; (80007bc <Display7SEG+0x31c>)
 80006be:	f001 fcc4 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	483d      	ldr	r0, [pc, #244]	; (80007bc <Display7SEG+0x31c>)
 80006c8:	f001 fcbf 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	483a      	ldr	r0, [pc, #232]	; (80007bc <Display7SEG+0x31c>)
 80006d2:	f001 fcba 	bl	800204a <HAL_GPIO_WritePin>
				break;
 80006d6:	e06c      	b.n	80007b2 <Display7SEG+0x312>
		case 7:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4837      	ldr	r0, [pc, #220]	; (80007bc <Display7SEG+0x31c>)
 80006de:	f001 fcb4 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4835      	ldr	r0, [pc, #212]	; (80007bc <Display7SEG+0x31c>)
 80006e8:	f001 fcaf 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	4832      	ldr	r0, [pc, #200]	; (80007bc <Display7SEG+0x31c>)
 80006f2:	f001 fcaa 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	4830      	ldr	r0, [pc, #192]	; (80007bc <Display7SEG+0x31c>)
 80006fc:	f001 fca5 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	482d      	ldr	r0, [pc, #180]	; (80007bc <Display7SEG+0x31c>)
 8000706:	f001 fca0 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	482b      	ldr	r0, [pc, #172]	; (80007bc <Display7SEG+0x31c>)
 8000710:	f001 fc9b 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <Display7SEG+0x31c>)
 800071a:	f001 fc96 	bl	800204a <HAL_GPIO_WritePin>
				break;
 800071e:	e048      	b.n	80007b2 <Display7SEG+0x312>
		case 8:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	4825      	ldr	r0, [pc, #148]	; (80007bc <Display7SEG+0x31c>)
 8000726:	f001 fc90 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <Display7SEG+0x31c>)
 8000730:	f001 fc8b 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	4820      	ldr	r0, [pc, #128]	; (80007bc <Display7SEG+0x31c>)
 800073a:	f001 fc86 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2108      	movs	r1, #8
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <Display7SEG+0x31c>)
 8000744:	f001 fc81 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2110      	movs	r1, #16
 800074c:	481b      	ldr	r0, [pc, #108]	; (80007bc <Display7SEG+0x31c>)
 800074e:	f001 fc7c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4819      	ldr	r0, [pc, #100]	; (80007bc <Display7SEG+0x31c>)
 8000758:	f001 fc77 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4816      	ldr	r0, [pc, #88]	; (80007bc <Display7SEG+0x31c>)
 8000762:	f001 fc72 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000766:	e024      	b.n	80007b2 <Display7SEG+0x312>
		case 9:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <Display7SEG+0x31c>)
 800076e:	f001 fc6c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <Display7SEG+0x31c>)
 8000778:	f001 fc67 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	480e      	ldr	r0, [pc, #56]	; (80007bc <Display7SEG+0x31c>)
 8000782:	f001 fc62 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <Display7SEG+0x31c>)
 800078c:	f001 fc5d 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <Display7SEG+0x31c>)
 8000796:	f001 fc58 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <Display7SEG+0x31c>)
 80007a0:	f001 fc53 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <Display7SEG+0x31c>)
 80007aa:	f001 fc4e 	bl	800204a <HAL_GPIO_WritePin>
				break;
 80007ae:	e000      	b.n	80007b2 <Display7SEG+0x312>
		default:
			break;
 80007b0:	bf00      	nop
	}
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <update7SEG>:
void update7SEG (int index) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	f200 808f 	bhi.w	80008ee <update7SEG+0x12e>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <update7SEG+0x18>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	08000829 	.word	0x08000829
 80007e0:	08000869 	.word	0x08000869
 80007e4:	080008a9 	.word	0x080008a9
   switch (index) {
     case 0:
       // Display the first 7 SEG with led_buffer [0]
  	  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	4842      	ldr	r0, [pc, #264]	; (80008f8 <update7SEG+0x138>)
 80007f0:	f001 fc2b 	bl	800204a <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fa:	483f      	ldr	r0, [pc, #252]	; (80008f8 <update7SEG+0x138>)
 80007fc:	f001 fc25 	bl	800204a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000806:	483c      	ldr	r0, [pc, #240]	; (80008f8 <update7SEG+0x138>)
 8000808:	f001 fc1f 	bl	800204a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,1);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	4839      	ldr	r0, [pc, #228]	; (80008f8 <update7SEG+0x138>)
 8000814:	f001 fc19 	bl	800204a <HAL_GPIO_WritePin>
       Display7SEG(led_buffer[index]);
 8000818:	4a38      	ldr	r2, [pc, #224]	; (80008fc <update7SEG+0x13c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe3d 	bl	80004a0 <Display7SEG>
       break ;
 8000826:	e063      	b.n	80008f0 <update7SEG+0x130>
     case 1:
       // Display the second 7 SEG with led_buffer [1]
       HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082e:	4832      	ldr	r0, [pc, #200]	; (80008f8 <update7SEG+0x138>)
 8000830:	f001 fc0b 	bl	800204a <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,0);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083a:	482f      	ldr	r0, [pc, #188]	; (80008f8 <update7SEG+0x138>)
 800083c:	f001 fc05 	bl	800204a <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	482c      	ldr	r0, [pc, #176]	; (80008f8 <update7SEG+0x138>)
 8000848:	f001 fbff 	bl	800204a <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4829      	ldr	r0, [pc, #164]	; (80008f8 <update7SEG+0x138>)
 8000854:	f001 fbf9 	bl	800204a <HAL_GPIO_WritePin>
       Display7SEG(led_buffer[index]);
 8000858:	4a28      	ldr	r2, [pc, #160]	; (80008fc <update7SEG+0x13c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe1d 	bl	80004a0 <Display7SEG>
       break ;
 8000866:	e043      	b.n	80008f0 <update7SEG+0x130>
     case 2:
       // Display the third 7 SEG with led_buffer [2]
    	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4822      	ldr	r0, [pc, #136]	; (80008f8 <update7SEG+0x138>)
 8000870:	f001 fbeb 	bl	800204a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	481f      	ldr	r0, [pc, #124]	; (80008f8 <update7SEG+0x138>)
 800087c:	f001 fbe5 	bl	800204a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,0);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	481c      	ldr	r0, [pc, #112]	; (80008f8 <update7SEG+0x138>)
 8000888:	f001 fbdf 	bl	800204a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,1);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4819      	ldr	r0, [pc, #100]	; (80008f8 <update7SEG+0x138>)
 8000894:	f001 fbd9 	bl	800204a <HAL_GPIO_WritePin>
       Display7SEG(led_buffer[index]);
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <update7SEG+0x13c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fdfd 	bl	80004a0 <Display7SEG>
       break ;
 80008a6:	e023      	b.n	80008f0 <update7SEG+0x130>
     case 3:
       // Display the forth 7 SEG with led_buffer [3]
    	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <update7SEG+0x138>)
 80008b0:	f001 fbcb 	bl	800204a <HAL_GPIO_WritePin>
    	  	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ba:	480f      	ldr	r0, [pc, #60]	; (80008f8 <update7SEG+0x138>)
 80008bc:	f001 fbc5 	bl	800204a <HAL_GPIO_WritePin>
    		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <update7SEG+0x138>)
 80008c8:	f001 fbbf 	bl	800204a <HAL_GPIO_WritePin>
    		 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <update7SEG+0x138>)
 80008d4:	f001 fbb9 	bl	800204a <HAL_GPIO_WritePin>
       index_led = 0;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <update7SEG+0x140>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
       Display7SEG(led_buffer[index]);
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <update7SEG+0x13c>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fdda 	bl	80004a0 <Display7SEG>
       break ;
 80008ec:	e000      	b.n	80008f0 <update7SEG+0x130>

     default :
       break ;
 80008ee:	bf00      	nop
   }
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40010800 	.word	0x40010800
 80008fc:	200000b4 	.word	0x200000b4
 8000900:	20000090 	.word	0x20000090

08000904 <fsm_automatic_run>:


int count = 0;
void fsm_automatic_run(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	switch (status) {
 8000908:	4ba6      	ldr	r3, [pc, #664]	; (8000ba4 <fsm_automatic_run+0x2a0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b03      	cmp	r3, #3
 800090e:	f000 80d4 	beq.w	8000aba <fsm_automatic_run+0x1b6>
 8000912:	2b03      	cmp	r3, #3
 8000914:	f300 81dc 	bgt.w	8000cd0 <fsm_automatic_run+0x3cc>
 8000918:	2b01      	cmp	r3, #1
 800091a:	d003      	beq.n	8000924 <fsm_automatic_run+0x20>
 800091c:	2b02      	cmp	r3, #2
 800091e:	f000 815f 	beq.w	8000be0 <fsm_automatic_run+0x2dc>
				duration_red_LR = duration_red_LR_modify;
				duration_green_UD = duration_green_LR_modify;
			}
			break;
		default:
			break;
 8000922:	e1d5      	b.n	8000cd0 <fsm_automatic_run+0x3cc>
			  if(isButtonPressed1() == 1){
 8000924:	f7ff fc36 	bl	8000194 <isButtonPressed1>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d10c      	bne.n	8000948 <fsm_automatic_run+0x44>
					status = RED_MODE; // Chuyen che do
 800092e:	4b9d      	ldr	r3, [pc, #628]	; (8000ba4 <fsm_automatic_run+0x2a0>)
 8000930:	220d      	movs	r2, #13
 8000932:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	489b      	ldr	r0, [pc, #620]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 800093a:	f001 fb86 	bl	800204a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	4899      	ldr	r0, [pc, #612]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000944:	f001 fb81 	bl	800204a <HAL_GPIO_WritePin>
	    	if (duration_green_UD == 0){ // Khi den xanh tren duoi het chu ki, den vang tren duoi se sang
 8000948:	4b98      	ldr	r3, [pc, #608]	; (8000bac <fsm_automatic_run+0x2a8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14d      	bne.n	80009ec <fsm_automatic_run+0xe8>
	    		updateBuffer(duration_red_LR,duration_yellow_UD); // Hien thi len 4 LED 7 doan
 8000950:	4b97      	ldr	r3, [pc, #604]	; (8000bb0 <fsm_automatic_run+0x2ac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a97      	ldr	r2, [pc, #604]	; (8000bb4 <fsm_automatic_run+0x2b0>)
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fd5c 	bl	8000418 <updateBuffer>
	    		if(timer2_flag == 1){
 8000960:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <fsm_automatic_run+0x2b4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d120      	bne.n	80009aa <fsm_automatic_run+0xa6>
	    			  count++;
 8000968:	4b94      	ldr	r3, [pc, #592]	; (8000bbc <fsm_automatic_run+0x2b8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a93      	ldr	r2, [pc, #588]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000970:	6013      	str	r3, [r2, #0]
	    			  setTimer2(250); // Set timer 0.25s
 8000972:	20fa      	movs	r0, #250	; 0xfa
 8000974:	f000 ff6e 	bl	8001854 <setTimer2>
	    			  update7SEG(index_led++);
 8000978:	4b91      	ldr	r3, [pc, #580]	; (8000bc0 <fsm_automatic_run+0x2bc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	4990      	ldr	r1, [pc, #576]	; (8000bc0 <fsm_automatic_run+0x2bc>)
 8000980:	600a      	str	r2, [r1, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff1c 	bl	80007c0 <update7SEG>
	    			  if (count == 4){
 8000988:	4b8c      	ldr	r3, [pc, #560]	; (8000bbc <fsm_automatic_run+0x2b8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d10c      	bne.n	80009aa <fsm_automatic_run+0xa6>
	    			      duration_red_LR--;
 8000990:	4b87      	ldr	r3, [pc, #540]	; (8000bb0 <fsm_automatic_run+0x2ac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	4a86      	ldr	r2, [pc, #536]	; (8000bb0 <fsm_automatic_run+0x2ac>)
 8000998:	6013      	str	r3, [r2, #0]
	    			      duration_yellow_UD--;
 800099a:	4b86      	ldr	r3, [pc, #536]	; (8000bb4 <fsm_automatic_run+0x2b0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3b01      	subs	r3, #1
 80009a0:	4a84      	ldr	r2, [pc, #528]	; (8000bb4 <fsm_automatic_run+0x2b0>)
 80009a2:	6013      	str	r3, [r2, #0]
	    			      count = 0;
 80009a4:	4b85      	ldr	r3, [pc, #532]	; (8000bbc <fsm_automatic_run+0x2b8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
		    	HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	487e      	ldr	r0, [pc, #504]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 80009b0:	f001 fb4b 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2120      	movs	r1, #32
 80009b8:	487b      	ldr	r0, [pc, #492]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 80009ba:	f001 fb46 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4879      	ldr	r0, [pc, #484]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 80009c4:	f001 fb41 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	4876      	ldr	r0, [pc, #472]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 80009ce:	f001 fb3c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	4873      	ldr	r0, [pc, #460]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 80009da:	f001 fb36 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,0);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e4:	4870      	ldr	r0, [pc, #448]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 80009e6:	f001 fb30 	bl	800204a <HAL_GPIO_WritePin>
 80009ea:	e04c      	b.n	8000a86 <fsm_automatic_run+0x182>
	    		updateBuffer(duration_red_LR,duration_green_UD);
 80009ec:	4b70      	ldr	r3, [pc, #448]	; (8000bb0 <fsm_automatic_run+0x2ac>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a6e      	ldr	r2, [pc, #440]	; (8000bac <fsm_automatic_run+0x2a8>)
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd0e 	bl	8000418 <updateBuffer>
	    		if(timer2_flag == 1){
 80009fc:	4b6e      	ldr	r3, [pc, #440]	; (8000bb8 <fsm_automatic_run+0x2b4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d140      	bne.n	8000a86 <fsm_automatic_run+0x182>
	    			count++;
 8000a04:	4b6d      	ldr	r3, [pc, #436]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a6c      	ldr	r2, [pc, #432]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000a0c:	6013      	str	r3, [r2, #0]
                    setTimer2(250);
 8000a0e:	20fa      	movs	r0, #250	; 0xfa
 8000a10:	f000 ff20 	bl	8001854 <setTimer2>
	    			update7SEG(index_led++);
 8000a14:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <fsm_automatic_run+0x2bc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	4969      	ldr	r1, [pc, #420]	; (8000bc0 <fsm_automatic_run+0x2bc>)
 8000a1c:	600a      	str	r2, [r1, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fece 	bl	80007c0 <update7SEG>
	    		   if (count == 4){
 8000a24:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d10c      	bne.n	8000a46 <fsm_automatic_run+0x142>
	    			duration_red_LR--;
 8000a2c:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <fsm_automatic_run+0x2ac>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	4a5f      	ldr	r2, [pc, #380]	; (8000bb0 <fsm_automatic_run+0x2ac>)
 8000a34:	6013      	str	r3, [r2, #0]
	    			duration_green_UD--;
 8000a36:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <fsm_automatic_run+0x2a8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a5b      	ldr	r2, [pc, #364]	; (8000bac <fsm_automatic_run+0x2a8>)
 8000a3e:	6013      	str	r3, [r2, #0]
	    			count = 0;
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
	    		   HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4857      	ldr	r0, [pc, #348]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000a4c:	f001 fafd 	bl	800204a <HAL_GPIO_WritePin>
	    		   HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2120      	movs	r1, #32
 8000a54:	4854      	ldr	r0, [pc, #336]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000a56:	f001 faf8 	bl	800204a <HAL_GPIO_WritePin>
	    		   HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	4852      	ldr	r0, [pc, #328]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000a60:	f001 faf3 	bl	800204a <HAL_GPIO_WritePin>
	    		   HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	484f      	ldr	r0, [pc, #316]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000a6a:	f001 faee 	bl	800204a <HAL_GPIO_WritePin>
	    		   HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	484c      	ldr	r0, [pc, #304]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000a76:	f001 fae8 	bl	800204a <HAL_GPIO_WritePin>
	    		   HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a80:	4849      	ldr	r0, [pc, #292]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000a82:	f001 fae2 	bl	800204a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){ // Thoi gian timer het chuyen sang trang thai tiep theo
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <fsm_automatic_run+0x2c0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	f040 8122 	bne.w	8000cd4 <fsm_automatic_run+0x3d0>
				status = AUTO_GREEN;
 8000a90:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <fsm_automatic_run+0x2a0>)
 8000a92:	2203      	movs	r2, #3
 8000a94:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green_LR_modify*1000);
 8000a96:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <fsm_automatic_run+0x2c4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 febc 	bl	8001820 <setTimer1>
				duration_green_LR = duration_green_LR_modify;
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <fsm_automatic_run+0x2c4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <fsm_automatic_run+0x2c8>)
 8000aae:	6013      	str	r3, [r2, #0]
				duration_red_UD = duration_red_LR_modify;
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <fsm_automatic_run+0x2cc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a47      	ldr	r2, [pc, #284]	; (8000bd4 <fsm_automatic_run+0x2d0>)
 8000ab6:	6013      	str	r3, [r2, #0]
			break;
 8000ab8:	e10c      	b.n	8000cd4 <fsm_automatic_run+0x3d0>
			  if(isButtonPressed1() == 1){
 8000aba:	f7ff fb6b 	bl	8000194 <isButtonPressed1>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10c      	bne.n	8000ade <fsm_automatic_run+0x1da>
					status = RED_MODE;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <fsm_automatic_run+0x2a0>)
 8000ac6:	220d      	movs	r2, #13
 8000ac8:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2110      	movs	r1, #16
 8000ace:	4836      	ldr	r0, [pc, #216]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000ad0:	f001 fabb 	bl	800204a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	4833      	ldr	r0, [pc, #204]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000ada:	f001 fab6 	bl	800204a <HAL_GPIO_WritePin>
			updateBuffer(duration_green_LR,duration_red_UD);
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <fsm_automatic_run+0x2c8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <fsm_automatic_run+0x2d0>)
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fc95 	bl	8000418 <updateBuffer>
			if(timer2_flag == 1){
 8000aee:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <fsm_automatic_run+0x2b4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d120      	bne.n	8000b38 <fsm_automatic_run+0x234>
				setTimer2(250);
 8000af6:	20fa      	movs	r0, #250	; 0xfa
 8000af8:	f000 feac 	bl	8001854 <setTimer2>
				count++;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000b04:	6013      	str	r3, [r2, #0]
				update7SEG(index_led++);
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <fsm_automatic_run+0x2bc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	492c      	ldr	r1, [pc, #176]	; (8000bc0 <fsm_automatic_run+0x2bc>)
 8000b0e:	600a      	str	r2, [r1, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe55 	bl	80007c0 <update7SEG>
				if (count == 4){
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d10c      	bne.n	8000b38 <fsm_automatic_run+0x234>
					duration_green_LR--;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <fsm_automatic_run+0x2c8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a29      	ldr	r2, [pc, #164]	; (8000bcc <fsm_automatic_run+0x2c8>)
 8000b26:	6013      	str	r3, [r2, #0]
					duration_red_UD--;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <fsm_automatic_run+0x2d0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <fsm_automatic_run+0x2d0>)
 8000b30:	6013      	str	r3, [r2, #0]
					count = 0;
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <fsm_automatic_run+0x2b8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000b3e:	f001 fa84 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000b48:	f001 fa7f 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000b52:	f001 fa7a 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000b5c:	f001 fa75 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000b68:	f001 fa6f 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <fsm_automatic_run+0x2a4>)
 8000b74:	f001 fa69 	bl	800204a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <fsm_automatic_run+0x2c0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	f040 80ab 	bne.w	8000cd8 <fsm_automatic_run+0x3d4>
				status = AUTO_YELLOW;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <fsm_automatic_run+0x2a0>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	601a      	str	r2, [r3, #0]
				setTimer1(duration_yellow_LR_modify*1000);
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <fsm_automatic_run+0x2d4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fe43 	bl	8001820 <setTimer1>
				duration_yellow_LR = duration_yellow_LR_modify;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <fsm_automatic_run+0x2d4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <fsm_automatic_run+0x2d8>)
 8000ba0:	6013      	str	r3, [r2, #0]
			break;
 8000ba2:	e099      	b.n	8000cd8 <fsm_automatic_run+0x3d4>
 8000ba4:	200000a0 	.word	0x200000a0
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	200000d4 	.word	0x200000d4
 8000bb0:	200000dc 	.word	0x200000dc
 8000bb4:	200000d8 	.word	0x200000d8
 8000bb8:	200000ac 	.word	0x200000ac
 8000bbc:	20000094 	.word	0x20000094
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	2000004c 	.word	0x2000004c
 8000bcc:	200000e8 	.word	0x200000e8
 8000bd0:	20000048 	.word	0x20000048
 8000bd4:	200000e4 	.word	0x200000e4
 8000bd8:	20000050 	.word	0x20000050
 8000bdc:	200000e0 	.word	0x200000e0
			  if(isButtonPressed1() == 1){
 8000be0:	f7ff fad8 	bl	8000194 <isButtonPressed1>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10c      	bne.n	8000c04 <fsm_automatic_run+0x300>
					status = RED_MODE;
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <fsm_automatic_run+0x3e0>)
 8000bec:	220d      	movs	r2, #13
 8000bee:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	483c      	ldr	r0, [pc, #240]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000bf6:	f001 fa28 	bl	800204a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c00:	f001 fa23 	bl	800204a <HAL_GPIO_WritePin>
			 updateBuffer(duration_yellow_LR,duration_red_UD);
 8000c04:	4b39      	ldr	r3, [pc, #228]	; (8000cec <fsm_automatic_run+0x3e8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a39      	ldr	r2, [pc, #228]	; (8000cf0 <fsm_automatic_run+0x3ec>)
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fc02 	bl	8000418 <updateBuffer>
			 	if(timer2_flag == 1){
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <fsm_automatic_run+0x3f0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d120      	bne.n	8000c5e <fsm_automatic_run+0x35a>
			 		setTimer2(250);
 8000c1c:	20fa      	movs	r0, #250	; 0xfa
 8000c1e:	f000 fe19 	bl	8001854 <setTimer2>
			 		count++;
 8000c22:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <fsm_automatic_run+0x3f4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <fsm_automatic_run+0x3f4>)
 8000c2a:	6013      	str	r3, [r2, #0]
			 		update7SEG(index_led++);
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <fsm_automatic_run+0x3f8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	4932      	ldr	r1, [pc, #200]	; (8000cfc <fsm_automatic_run+0x3f8>)
 8000c34:	600a      	str	r2, [r1, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fdc2 	bl	80007c0 <update7SEG>
			 		if (count == 4){
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <fsm_automatic_run+0x3f4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d10c      	bne.n	8000c5e <fsm_automatic_run+0x35a>
			 			   duration_yellow_LR--;
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <fsm_automatic_run+0x3e8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	4a28      	ldr	r2, [pc, #160]	; (8000cec <fsm_automatic_run+0x3e8>)
 8000c4c:	6013      	str	r3, [r2, #0]
			 			   duration_red_UD--;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <fsm_automatic_run+0x3ec>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <fsm_automatic_run+0x3ec>)
 8000c56:	6013      	str	r3, [r2, #0]
			 			   count = 0;
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <fsm_automatic_run+0x3f4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	4821      	ldr	r0, [pc, #132]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c64:	f001 f9f1 	bl	800204a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c6e:	f001 f9ec 	bl	800204a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,0);;
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c78:	f001 f9e7 	bl	800204a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c82:	f001 f9e2 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8c:	4816      	ldr	r0, [pc, #88]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c8e:	f001 f9dc 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <fsm_automatic_run+0x3e4>)
 8000c9a:	f001 f9d6 	bl	800204a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <fsm_automatic_run+0x3fc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d11a      	bne.n	8000cdc <fsm_automatic_run+0x3d8>
				status = AUTO_RED;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <fsm_automatic_run+0x3e0>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
				setTimer1(duration_red_LR_modify*1000);
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <fsm_automatic_run+0x400>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fdb1 	bl	8001820 <setTimer1>
				duration_red_LR = duration_red_LR_modify;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <fsm_automatic_run+0x400>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <fsm_automatic_run+0x404>)
 8000cc4:	6013      	str	r3, [r2, #0]
				duration_green_UD = duration_green_LR_modify;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <fsm_automatic_run+0x408>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <fsm_automatic_run+0x40c>)
 8000ccc:	6013      	str	r3, [r2, #0]
			break;
 8000cce:	e005      	b.n	8000cdc <fsm_automatic_run+0x3d8>
			break;
 8000cd0:	bf00      	nop
 8000cd2:	e004      	b.n	8000cde <fsm_automatic_run+0x3da>
			break;
 8000cd4:	bf00      	nop
 8000cd6:	e002      	b.n	8000cde <fsm_automatic_run+0x3da>
			break;
 8000cd8:	bf00      	nop
 8000cda:	e000      	b.n	8000cde <fsm_automatic_run+0x3da>
			break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000a0 	.word	0x200000a0
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	200000e0 	.word	0x200000e0
 8000cf0:	200000e4 	.word	0x200000e4
 8000cf4:	200000ac 	.word	0x200000ac
 8000cf8:	20000094 	.word	0x20000094
 8000cfc:	20000090 	.word	0x20000090
 8000d00:	200000a4 	.word	0x200000a4
 8000d04:	20000048 	.word	0x20000048
 8000d08:	200000dc 	.word	0x200000dc
 8000d0c:	2000004c 	.word	0x2000004c
 8000d10:	200000d4 	.word	0x200000d4

08000d14 <updateBuffer1>:
int duration_for_green = 1;
int count1 = 0;
int  index_led1 = 0;
int led_buffer1[4];
// luu cac gia tri thoi gian và mode vào buffer
void updateBuffer1(int time, int mode){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	  int a = time%10;
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <updateBuffer1+0x80>)
 8000d22:	fb83 1302 	smull	r1, r3, r3, r2
 8000d26:	1099      	asrs	r1, r3, #2
 8000d28:	17d3      	asrs	r3, r2, #31
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	60fb      	str	r3, [r7, #12]
	  time = time/10;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <updateBuffer1+0x80>)
 8000d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d40:	1092      	asrs	r2, r2, #2
 8000d42:	17db      	asrs	r3, r3, #31
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	607b      	str	r3, [r7, #4]
	  led_buffer1[0]= time;
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <updateBuffer1+0x84>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	  led_buffer1[1] = a;
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <updateBuffer1+0x84>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6053      	str	r3, [r2, #4]
	  int b = mode%10;
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <updateBuffer1+0x80>)
 8000d58:	fb83 1302 	smull	r1, r3, r3, r2
 8000d5c:	1099      	asrs	r1, r3, #2
 8000d5e:	17d3      	asrs	r3, r2, #31
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	460b      	mov	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	60bb      	str	r3, [r7, #8]
	  mode = mode/10;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <updateBuffer1+0x80>)
 8000d72:	fb82 1203 	smull	r1, r2, r2, r3
 8000d76:	1092      	asrs	r2, r2, #2
 8000d78:	17db      	asrs	r3, r3, #31
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	603b      	str	r3, [r7, #0]
	  led_buffer1[2]= mode;
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <updateBuffer1+0x84>)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	6093      	str	r3, [r2, #8]
	  led_buffer1[3] = b;
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <updateBuffer1+0x84>)
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	60d3      	str	r3, [r2, #12]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	66666667 	.word	0x66666667
 8000d98:	200000c4 	.word	0x200000c4

08000d9c <Display7SEG1>:
//Ham de hien thi so len LED 7 doan
void Display7SEG1(int count){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b09      	cmp	r3, #9
 8000da8:	f200 8180 	bhi.w	80010ac <Display7SEG1+0x310>
 8000dac:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <Display7SEG1+0x18>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000ddd 	.word	0x08000ddd
 8000db8:	08000e25 	.word	0x08000e25
 8000dbc:	08000e6d 	.word	0x08000e6d
 8000dc0:	08000eb5 	.word	0x08000eb5
 8000dc4:	08000efd 	.word	0x08000efd
 8000dc8:	08000f45 	.word	0x08000f45
 8000dcc:	08000f8d 	.word	0x08000f8d
 8000dd0:	08000fd5 	.word	0x08000fd5
 8000dd4:	0800101d 	.word	0x0800101d
 8000dd8:	08001065 	.word	0x08001065
	switch (count) {
		case 0:
			HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	48b5      	ldr	r0, [pc, #724]	; (80010b8 <Display7SEG1+0x31c>)
 8000de2:	f001 f932 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	48b3      	ldr	r0, [pc, #716]	; (80010b8 <Display7SEG1+0x31c>)
 8000dec:	f001 f92d 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	48b0      	ldr	r0, [pc, #704]	; (80010b8 <Display7SEG1+0x31c>)
 8000df6:	f001 f928 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	48ae      	ldr	r0, [pc, #696]	; (80010b8 <Display7SEG1+0x31c>)
 8000e00:	f001 f923 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2110      	movs	r1, #16
 8000e08:	48ab      	ldr	r0, [pc, #684]	; (80010b8 <Display7SEG1+0x31c>)
 8000e0a:	f001 f91e 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2120      	movs	r1, #32
 8000e12:	48a9      	ldr	r0, [pc, #676]	; (80010b8 <Display7SEG1+0x31c>)
 8000e14:	f001 f919 	bl	800204a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	48a6      	ldr	r0, [pc, #664]	; (80010b8 <Display7SEG1+0x31c>)
 8000e1e:	f001 f914 	bl	800204a <HAL_GPIO_WritePin>
			break;
 8000e22:	e144      	b.n	80010ae <Display7SEG1+0x312>
		case 1:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2101      	movs	r1, #1
 8000e28:	48a3      	ldr	r0, [pc, #652]	; (80010b8 <Display7SEG1+0x31c>)
 8000e2a:	f001 f90e 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2102      	movs	r1, #2
 8000e32:	48a1      	ldr	r0, [pc, #644]	; (80010b8 <Display7SEG1+0x31c>)
 8000e34:	f001 f909 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	489e      	ldr	r0, [pc, #632]	; (80010b8 <Display7SEG1+0x31c>)
 8000e3e:	f001 f904 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2108      	movs	r1, #8
 8000e46:	489c      	ldr	r0, [pc, #624]	; (80010b8 <Display7SEG1+0x31c>)
 8000e48:	f001 f8ff 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4899      	ldr	r0, [pc, #612]	; (80010b8 <Display7SEG1+0x31c>)
 8000e52:	f001 f8fa 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4897      	ldr	r0, [pc, #604]	; (80010b8 <Display7SEG1+0x31c>)
 8000e5c:	f001 f8f5 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4894      	ldr	r0, [pc, #592]	; (80010b8 <Display7SEG1+0x31c>)
 8000e66:	f001 f8f0 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000e6a:	e120      	b.n	80010ae <Display7SEG1+0x312>
		case 2:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4891      	ldr	r0, [pc, #580]	; (80010b8 <Display7SEG1+0x31c>)
 8000e72:	f001 f8ea 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2102      	movs	r1, #2
 8000e7a:	488f      	ldr	r0, [pc, #572]	; (80010b8 <Display7SEG1+0x31c>)
 8000e7c:	f001 f8e5 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2104      	movs	r1, #4
 8000e84:	488c      	ldr	r0, [pc, #560]	; (80010b8 <Display7SEG1+0x31c>)
 8000e86:	f001 f8e0 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	488a      	ldr	r0, [pc, #552]	; (80010b8 <Display7SEG1+0x31c>)
 8000e90:	f001 f8db 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2110      	movs	r1, #16
 8000e98:	4887      	ldr	r0, [pc, #540]	; (80010b8 <Display7SEG1+0x31c>)
 8000e9a:	f001 f8d6 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	4885      	ldr	r0, [pc, #532]	; (80010b8 <Display7SEG1+0x31c>)
 8000ea4:	f001 f8d1 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	4882      	ldr	r0, [pc, #520]	; (80010b8 <Display7SEG1+0x31c>)
 8000eae:	f001 f8cc 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000eb2:	e0fc      	b.n	80010ae <Display7SEG1+0x312>
		case 3:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	487f      	ldr	r0, [pc, #508]	; (80010b8 <Display7SEG1+0x31c>)
 8000eba:	f001 f8c6 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	487d      	ldr	r0, [pc, #500]	; (80010b8 <Display7SEG1+0x31c>)
 8000ec4:	f001 f8c1 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2104      	movs	r1, #4
 8000ecc:	487a      	ldr	r0, [pc, #488]	; (80010b8 <Display7SEG1+0x31c>)
 8000ece:	f001 f8bc 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4878      	ldr	r0, [pc, #480]	; (80010b8 <Display7SEG1+0x31c>)
 8000ed8:	f001 f8b7 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4875      	ldr	r0, [pc, #468]	; (80010b8 <Display7SEG1+0x31c>)
 8000ee2:	f001 f8b2 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2120      	movs	r1, #32
 8000eea:	4873      	ldr	r0, [pc, #460]	; (80010b8 <Display7SEG1+0x31c>)
 8000eec:	f001 f8ad 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4870      	ldr	r0, [pc, #448]	; (80010b8 <Display7SEG1+0x31c>)
 8000ef6:	f001 f8a8 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000efa:	e0d8      	b.n	80010ae <Display7SEG1+0x312>
		case 4:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2101      	movs	r1, #1
 8000f00:	486d      	ldr	r0, [pc, #436]	; (80010b8 <Display7SEG1+0x31c>)
 8000f02:	f001 f8a2 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2102      	movs	r1, #2
 8000f0a:	486b      	ldr	r0, [pc, #428]	; (80010b8 <Display7SEG1+0x31c>)
 8000f0c:	f001 f89d 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2104      	movs	r1, #4
 8000f14:	4868      	ldr	r0, [pc, #416]	; (80010b8 <Display7SEG1+0x31c>)
 8000f16:	f001 f898 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	4866      	ldr	r0, [pc, #408]	; (80010b8 <Display7SEG1+0x31c>)
 8000f20:	f001 f893 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	4863      	ldr	r0, [pc, #396]	; (80010b8 <Display7SEG1+0x31c>)
 8000f2a:	f001 f88e 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	4861      	ldr	r0, [pc, #388]	; (80010b8 <Display7SEG1+0x31c>)
 8000f34:	f001 f889 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	485e      	ldr	r0, [pc, #376]	; (80010b8 <Display7SEG1+0x31c>)
 8000f3e:	f001 f884 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000f42:	e0b4      	b.n	80010ae <Display7SEG1+0x312>
		case 5:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2101      	movs	r1, #1
 8000f48:	485b      	ldr	r0, [pc, #364]	; (80010b8 <Display7SEG1+0x31c>)
 8000f4a:	f001 f87e 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2102      	movs	r1, #2
 8000f52:	4859      	ldr	r0, [pc, #356]	; (80010b8 <Display7SEG1+0x31c>)
 8000f54:	f001 f879 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4856      	ldr	r0, [pc, #344]	; (80010b8 <Display7SEG1+0x31c>)
 8000f5e:	f001 f874 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2108      	movs	r1, #8
 8000f66:	4854      	ldr	r0, [pc, #336]	; (80010b8 <Display7SEG1+0x31c>)
 8000f68:	f001 f86f 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4851      	ldr	r0, [pc, #324]	; (80010b8 <Display7SEG1+0x31c>)
 8000f72:	f001 f86a 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2120      	movs	r1, #32
 8000f7a:	484f      	ldr	r0, [pc, #316]	; (80010b8 <Display7SEG1+0x31c>)
 8000f7c:	f001 f865 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	484c      	ldr	r0, [pc, #304]	; (80010b8 <Display7SEG1+0x31c>)
 8000f86:	f001 f860 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000f8a:	e090      	b.n	80010ae <Display7SEG1+0x312>
		case 6:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4849      	ldr	r0, [pc, #292]	; (80010b8 <Display7SEG1+0x31c>)
 8000f92:	f001 f85a 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 1);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4847      	ldr	r0, [pc, #284]	; (80010b8 <Display7SEG1+0x31c>)
 8000f9c:	f001 f855 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4844      	ldr	r0, [pc, #272]	; (80010b8 <Display7SEG1+0x31c>)
 8000fa6:	f001 f850 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2108      	movs	r1, #8
 8000fae:	4842      	ldr	r0, [pc, #264]	; (80010b8 <Display7SEG1+0x31c>)
 8000fb0:	f001 f84b 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	483f      	ldr	r0, [pc, #252]	; (80010b8 <Display7SEG1+0x31c>)
 8000fba:	f001 f846 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	483d      	ldr	r0, [pc, #244]	; (80010b8 <Display7SEG1+0x31c>)
 8000fc4:	f001 f841 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2140      	movs	r1, #64	; 0x40
 8000fcc:	483a      	ldr	r0, [pc, #232]	; (80010b8 <Display7SEG1+0x31c>)
 8000fce:	f001 f83c 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8000fd2:	e06c      	b.n	80010ae <Display7SEG1+0x312>
		case 7:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4837      	ldr	r0, [pc, #220]	; (80010b8 <Display7SEG1+0x31c>)
 8000fda:	f001 f836 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4835      	ldr	r0, [pc, #212]	; (80010b8 <Display7SEG1+0x31c>)
 8000fe4:	f001 f831 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2104      	movs	r1, #4
 8000fec:	4832      	ldr	r0, [pc, #200]	; (80010b8 <Display7SEG1+0x31c>)
 8000fee:	f001 f82c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4830      	ldr	r0, [pc, #192]	; (80010b8 <Display7SEG1+0x31c>)
 8000ff8:	f001 f827 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	482d      	ldr	r0, [pc, #180]	; (80010b8 <Display7SEG1+0x31c>)
 8001002:	f001 f822 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2120      	movs	r1, #32
 800100a:	482b      	ldr	r0, [pc, #172]	; (80010b8 <Display7SEG1+0x31c>)
 800100c:	f001 f81d 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <Display7SEG1+0x31c>)
 8001016:	f001 f818 	bl	800204a <HAL_GPIO_WritePin>
				break;
 800101a:	e048      	b.n	80010ae <Display7SEG1+0x312>
		case 8:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2101      	movs	r1, #1
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <Display7SEG1+0x31c>)
 8001022:	f001 f812 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2102      	movs	r1, #2
 800102a:	4823      	ldr	r0, [pc, #140]	; (80010b8 <Display7SEG1+0x31c>)
 800102c:	f001 f80d 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2104      	movs	r1, #4
 8001034:	4820      	ldr	r0, [pc, #128]	; (80010b8 <Display7SEG1+0x31c>)
 8001036:	f001 f808 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2108      	movs	r1, #8
 800103e:	481e      	ldr	r0, [pc, #120]	; (80010b8 <Display7SEG1+0x31c>)
 8001040:	f001 f803 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2110      	movs	r1, #16
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <Display7SEG1+0x31c>)
 800104a:	f000 fffe 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2120      	movs	r1, #32
 8001052:	4819      	ldr	r0, [pc, #100]	; (80010b8 <Display7SEG1+0x31c>)
 8001054:	f000 fff9 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	4816      	ldr	r0, [pc, #88]	; (80010b8 <Display7SEG1+0x31c>)
 800105e:	f000 fff4 	bl	800204a <HAL_GPIO_WritePin>
				break;
 8001062:	e024      	b.n	80010ae <Display7SEG1+0x312>
		case 9:
				HAL_GPIO_WritePin(SEG1_a_GPIO_Port, SEG1_a_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <Display7SEG1+0x31c>)
 800106a:	f000 ffee 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_b_GPIO_Port, SEG1_b_Pin, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <Display7SEG1+0x31c>)
 8001074:	f000 ffe9 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_c_GPIO_Port, SEG1_c_Pin, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2104      	movs	r1, #4
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <Display7SEG1+0x31c>)
 800107e:	f000 ffe4 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_d_GPIO_Port, SEG1_d_Pin, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2108      	movs	r1, #8
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <Display7SEG1+0x31c>)
 8001088:	f000 ffdf 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_e_GPIO_Port, SEG1_e_Pin, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	2110      	movs	r1, #16
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <Display7SEG1+0x31c>)
 8001092:	f000 ffda 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_f_GPIO_Port, SEG1_f_Pin, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2120      	movs	r1, #32
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <Display7SEG1+0x31c>)
 800109c:	f000 ffd5 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_g_GPIO_Port, SEG1_g_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <Display7SEG1+0x31c>)
 80010a6:	f000 ffd0 	bl	800204a <HAL_GPIO_WritePin>
				break;
 80010aa:	e000      	b.n	80010ae <Display7SEG1+0x312>
		default:
			break;
 80010ac:	bf00      	nop
	}
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40010c00 	.word	0x40010c00

080010bc <update7SEG1>:
// Hien thi gia tri thoi gian va mode len LED 7 doan tu buffer
void update7SEG1 (int index) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	f200 808f 	bhi.w	80011ea <update7SEG1+0x12e>
 80010cc:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <update7SEG1+0x18>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	08001125 	.word	0x08001125
 80010dc:	08001165 	.word	0x08001165
 80010e0:	080011a5 	.word	0x080011a5
   switch (index) {
     case 0:
       // Display the first 7 SEG with led_buffer [0]
  	  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ea:	4842      	ldr	r0, [pc, #264]	; (80011f4 <update7SEG1+0x138>)
 80010ec:	f000 ffad 	bl	800204a <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f6:	483f      	ldr	r0, [pc, #252]	; (80011f4 <update7SEG1+0x138>)
 80010f8:	f000 ffa7 	bl	800204a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001102:	483c      	ldr	r0, [pc, #240]	; (80011f4 <update7SEG1+0x138>)
 8001104:	f000 ffa1 	bl	800204a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,1);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110e:	4839      	ldr	r0, [pc, #228]	; (80011f4 <update7SEG1+0x138>)
 8001110:	f000 ff9b 	bl	800204a <HAL_GPIO_WritePin>
       Display7SEG1(led_buffer1[index]);
 8001114:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <update7SEG1+0x13c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe3d 	bl	8000d9c <Display7SEG1>
       break ;
 8001122:	e063      	b.n	80011ec <update7SEG1+0x130>
     case 1:
       // Display the second 7 SEG with led_buffer [1]
       HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112a:	4832      	ldr	r0, [pc, #200]	; (80011f4 <update7SEG1+0x138>)
 800112c:	f000 ff8d 	bl	800204a <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,0);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	482f      	ldr	r0, [pc, #188]	; (80011f4 <update7SEG1+0x138>)
 8001138:	f000 ff87 	bl	800204a <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	482c      	ldr	r0, [pc, #176]	; (80011f4 <update7SEG1+0x138>)
 8001144:	f000 ff81 	bl	800204a <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,1);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <update7SEG1+0x138>)
 8001150:	f000 ff7b 	bl	800204a <HAL_GPIO_WritePin>
       Display7SEG1(led_buffer1[index]);
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <update7SEG1+0x13c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe1d 	bl	8000d9c <Display7SEG1>
       break ;
 8001162:	e043      	b.n	80011ec <update7SEG1+0x130>
     case 2:
       // Display the third 7 SEG with led_buffer [2]
    	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	4822      	ldr	r0, [pc, #136]	; (80011f4 <update7SEG1+0x138>)
 800116c:	f000 ff6d 	bl	800204a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001176:	481f      	ldr	r0, [pc, #124]	; (80011f4 <update7SEG1+0x138>)
 8001178:	f000 ff67 	bl	800204a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,0);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	481c      	ldr	r0, [pc, #112]	; (80011f4 <update7SEG1+0x138>)
 8001184:	f000 ff61 	bl	800204a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,1);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <update7SEG1+0x138>)
 8001190:	f000 ff5b 	bl	800204a <HAL_GPIO_WritePin>
       Display7SEG1(led_buffer1[index]);
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <update7SEG1+0x13c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fdfd 	bl	8000d9c <Display7SEG1>
       break ;
 80011a2:	e023      	b.n	80011ec <update7SEG1+0x130>
     case 3:
       // Display the forth 7 SEG with led_buffer [3]
    	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <update7SEG1+0x138>)
 80011ac:	f000 ff4d 	bl	800204a <HAL_GPIO_WritePin>
    	  	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b6:	480f      	ldr	r0, [pc, #60]	; (80011f4 <update7SEG1+0x138>)
 80011b8:	f000 ff47 	bl	800204a <HAL_GPIO_WritePin>
    		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <update7SEG1+0x138>)
 80011c4:	f000 ff41 	bl	800204a <HAL_GPIO_WritePin>
    		 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin,0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <update7SEG1+0x138>)
 80011d0:	f000 ff3b 	bl	800204a <HAL_GPIO_WritePin>
       index_led1 = 0;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <update7SEG1+0x140>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
       Display7SEG1(led_buffer1[index]);
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <update7SEG1+0x13c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdda 	bl	8000d9c <Display7SEG1>
       break ;
 80011e8:	e000      	b.n	80011ec <update7SEG1+0x130>
     default :
       break ;
 80011ea:	bf00      	nop
   }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010800 	.word	0x40010800
 80011f8:	200000c4 	.word	0x200000c4
 80011fc:	2000009c 	.word	0x2000009c

08001200 <fsm_manual_run>:
// May trang thai hien thuc cac MODE
void fsm_manual_run(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	switch (status) {
 8001204:	4b9c      	ldr	r3, [pc, #624]	; (8001478 <fsm_manual_run+0x278>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	f200 81ba 	bhi.w	8001582 <fsm_manual_run+0x382>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <fsm_manual_run+0x14>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001255 	.word	0x08001255
 8001218:	08001583 	.word	0x08001583
 800121c:	08001583 	.word	0x08001583
 8001220:	08001583 	.word	0x08001583
 8001224:	08001583 	.word	0x08001583
 8001228:	08001583 	.word	0x08001583
 800122c:	08001583 	.word	0x08001583
 8001230:	08001583 	.word	0x08001583
 8001234:	08001583 	.word	0x08001583
 8001238:	08001583 	.word	0x08001583
 800123c:	08001583 	.word	0x08001583
 8001240:	08001583 	.word	0x08001583
 8001244:	0800125d 	.word	0x0800125d
 8001248:	080012cf 	.word	0x080012cf
 800124c:	080013a3 	.word	0x080013a3
 8001250:	080014a9 	.word	0x080014a9
		case INIT: // Trang thai khoi dau
			status = NORMAL_MODE;
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <fsm_manual_run+0x278>)
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
		    break;
 800125a:	e199      	b.n	8001590 <fsm_manual_run+0x390>
		case NORMAL_MODE: // trang thai normal
		    	HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	4886      	ldr	r0, [pc, #536]	; (800147c <fsm_manual_run+0x27c>)
 8001262:	f000 fef2 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,0);
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	4884      	ldr	r0, [pc, #528]	; (800147c <fsm_manual_run+0x27c>)
 800126c:	f000 feed 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,0);
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	; 0x40
 8001274:	4881      	ldr	r0, [pc, #516]	; (800147c <fsm_manual_run+0x27c>)
 8001276:	f000 fee8 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	487f      	ldr	r0, [pc, #508]	; (800147c <fsm_manual_run+0x27c>)
 8001280:	f000 fee3 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,0);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	487c      	ldr	r0, [pc, #496]	; (800147c <fsm_manual_run+0x27c>)
 800128c:	f000 fedd 	bl	800204a <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,0);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001296:	4879      	ldr	r0, [pc, #484]	; (800147c <fsm_manual_run+0x27c>)
 8001298:	f000 fed7 	bl	800204a <HAL_GPIO_WritePin>
		    	status = AUTO_RED; // Chuyen sang che do den giao thong
 800129c:	4b76      	ldr	r3, [pc, #472]	; (8001478 <fsm_manual_run+0x278>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
		    	setTimer1(duration_red_LR_modify*1000); // Set timer
 80012a2:	4b77      	ldr	r3, [pc, #476]	; (8001480 <fsm_manual_run+0x280>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fab6 	bl	8001820 <setTimer1>
		    	duration_red_LR = duration_red_LR_modify; // Lay cac gia tri chu ki sang cua cac loai den
 80012b4:	4b72      	ldr	r3, [pc, #456]	; (8001480 <fsm_manual_run+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a72      	ldr	r2, [pc, #456]	; (8001484 <fsm_manual_run+0x284>)
 80012ba:	6013      	str	r3, [r2, #0]
		    	duration_green_UD = duration_green_LR_modify;
 80012bc:	4b72      	ldr	r3, [pc, #456]	; (8001488 <fsm_manual_run+0x288>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <fsm_manual_run+0x28c>)
 80012c2:	6013      	str	r3, [r2, #0]
		    	duration_yellow_UD = duration_yellow_LR_modify;
 80012c4:	4b72      	ldr	r3, [pc, #456]	; (8001490 <fsm_manual_run+0x290>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a72      	ldr	r2, [pc, #456]	; (8001494 <fsm_manual_run+0x294>)
 80012ca:	6013      	str	r3, [r2, #0]
		        break;
 80012cc:	e160      	b.n	8001590 <fsm_manual_run+0x390>
			break;
		case RED_MODE: // Trang thai dieu chinh den do
			updateBuffer1(duration_for_red, 1);
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <fsm_manual_run+0x298>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2101      	movs	r1, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fd1d 	bl	8000d14 <updateBuffer1>
			if (timer2_flag == 1){
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <fsm_manual_run+0x29c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d128      	bne.n	8001334 <fsm_manual_run+0x134>
						setTimer2(250); // Set timer 0.25s
 80012e2:	20fa      	movs	r0, #250	; 0xfa
 80012e4:	f000 fab6 	bl	8001854 <setTimer2>
						// Chop tat den
						HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2120      	movs	r1, #32
 80012ec:	4863      	ldr	r0, [pc, #396]	; (800147c <fsm_manual_run+0x27c>)
 80012ee:	f000 feac 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2140      	movs	r1, #64	; 0x40
 80012f6:	4861      	ldr	r0, [pc, #388]	; (800147c <fsm_manual_run+0x27c>)
 80012f8:	f000 fea7 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	485e      	ldr	r0, [pc, #376]	; (800147c <fsm_manual_run+0x27c>)
 8001304:	f000 fea1 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,0);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130e:	485b      	ldr	r0, [pc, #364]	; (800147c <fsm_manual_run+0x27c>)
 8001310:	f000 fe9b 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_TogglePin(LED_RED_LR_GPIO_Port, LED_RED_LR_Pin);
 8001314:	2110      	movs	r1, #16
 8001316:	4859      	ldr	r0, [pc, #356]	; (800147c <fsm_manual_run+0x27c>)
 8001318:	f000 feaf 	bl	800207a <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(LED_RED_UD_GPIO_Port, LED_RED_UD_Pin);
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	4857      	ldr	r0, [pc, #348]	; (800147c <fsm_manual_run+0x27c>)
 8001320:	f000 feab 	bl	800207a <HAL_GPIO_TogglePin>
						update7SEG1(index_led1++);
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <fsm_manual_run+0x2a0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	495d      	ldr	r1, [pc, #372]	; (80014a0 <fsm_manual_run+0x2a0>)
 800132c:	600a      	str	r2, [r1, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fec4 	bl	80010bc <update7SEG1>
			}
			if (isButtonPressed2() == 1){ // Nut nhan thu 2 duoc nhan tha
 8001334:	f7fe ff40 	bl	80001b8 <isButtonPressed2>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10c      	bne.n	8001358 <fsm_manual_run+0x158>
				if (duration_for_red>= 99){
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <fsm_manual_run+0x298>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b62      	cmp	r3, #98	; 0x62
 8001344:	dd03      	ble.n	800134e <fsm_manual_run+0x14e>
						duration_for_red = 99; // Khi gia tri chu ki lon hon 99
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <fsm_manual_run+0x298>)
 8001348:	2263      	movs	r2, #99	; 0x63
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e004      	b.n	8001358 <fsm_manual_run+0x158>
				}
				else{
						duration_for_red++; // Tang gia tri chu ki den do len 1 don vi
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <fsm_manual_run+0x298>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a50      	ldr	r2, [pc, #320]	; (8001498 <fsm_manual_run+0x298>)
 8001356:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonHold2() == 1){  // Nut nhan thu 2 duoc nhan giu
 8001358:	f7fe ff52 	bl	8000200 <isButtonHold2>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10c      	bne.n	800137c <fsm_manual_run+0x17c>
				if (duration_for_red>= 99){
 8001362:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <fsm_manual_run+0x298>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b62      	cmp	r3, #98	; 0x62
 8001368:	dd03      	ble.n	8001372 <fsm_manual_run+0x172>
					duration_for_red = 99;
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <fsm_manual_run+0x298>)
 800136c:	2263      	movs	r2, #99	; 0x63
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e004      	b.n	800137c <fsm_manual_run+0x17c>
				}
				else{
				duration_for_red++;
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <fsm_manual_run+0x298>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a47      	ldr	r2, [pc, #284]	; (8001498 <fsm_manual_run+0x298>)
 800137a:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonPressed3() == 1){ // Nut nhan thu 3 duoc nhan
 800137c:	f7fe ff2e 	bl	80001dc <isButtonPressed3>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d103      	bne.n	800138e <fsm_manual_run+0x18e>
				duration_red_LR_modify = duration_for_red; // Luu gia tri thoi gian da dieu chinh
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <fsm_manual_run+0x298>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <fsm_manual_run+0x280>)
 800138c:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed1() == 1){ // Nut nhan thu 1 duoc nhan
 800138e:	f7fe ff01 	bl	8000194 <isButtonPressed1>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	f040 80f6 	bne.w	8001586 <fsm_manual_run+0x386>
				status = YELLOW_MODE; // Chuyen mode
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <fsm_manual_run+0x278>)
 800139c:	220e      	movs	r2, #14
 800139e:	601a      	str	r2, [r3, #0]
			}
		    break;
 80013a0:	e0f1      	b.n	8001586 <fsm_manual_run+0x386>
		case YELLOW_MODE: // Trang thai dieu chinh den vang
			updateBuffer1(duration_for_yellow, 2);
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <fsm_manual_run+0x2a4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2102      	movs	r1, #2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fcb3 	bl	8000d14 <updateBuffer1>
					if (timer2_flag == 1){
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <fsm_manual_run+0x29c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d128      	bne.n	8001408 <fsm_manual_run+0x208>
						setTimer2(250);
 80013b6:	20fa      	movs	r0, #250	; 0xfa
 80013b8:	f000 fa4c 	bl	8001854 <setTimer2>
						HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2110      	movs	r1, #16
 80013c0:	482e      	ldr	r0, [pc, #184]	; (800147c <fsm_manual_run+0x27c>)
 80013c2:	f000 fe42 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin,0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	482c      	ldr	r0, [pc, #176]	; (800147c <fsm_manual_run+0x27c>)
 80013cc:	f000 fe3d 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	4829      	ldr	r0, [pc, #164]	; (800147c <fsm_manual_run+0x27c>)
 80013d6:	f000 fe38 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin,0);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e0:	4826      	ldr	r0, [pc, #152]	; (800147c <fsm_manual_run+0x27c>)
 80013e2:	f000 fe32 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_TogglePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin);
 80013e6:	2120      	movs	r1, #32
 80013e8:	4824      	ldr	r0, [pc, #144]	; (800147c <fsm_manual_run+0x27c>)
 80013ea:	f000 fe46 	bl	800207a <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin);
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	4822      	ldr	r0, [pc, #136]	; (800147c <fsm_manual_run+0x27c>)
 80013f4:	f000 fe41 	bl	800207a <HAL_GPIO_TogglePin>
						update7SEG1(index_led1++);
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <fsm_manual_run+0x2a0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	4928      	ldr	r1, [pc, #160]	; (80014a0 <fsm_manual_run+0x2a0>)
 8001400:	600a      	str	r2, [r1, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe5a 	bl	80010bc <update7SEG1>
				}
					if (isButtonPressed2() == 1){
 8001408:	f7fe fed6 	bl	80001b8 <isButtonPressed2>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10c      	bne.n	800142c <fsm_manual_run+0x22c>
						if (duration_for_yellow >= 99){
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <fsm_manual_run+0x2a4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b62      	cmp	r3, #98	; 0x62
 8001418:	dd03      	ble.n	8001422 <fsm_manual_run+0x222>
						duration_for_yellow = 99;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <fsm_manual_run+0x2a4>)
 800141c:	2263      	movs	r2, #99	; 0x63
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e004      	b.n	800142c <fsm_manual_run+0x22c>
						}
						else duration_for_yellow++;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <fsm_manual_run+0x2a4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <fsm_manual_run+0x2a4>)
 800142a:	6013      	str	r3, [r2, #0]
			}
			if(isButtonHold2() == 1){
 800142c:	f7fe fee8 	bl	8000200 <isButtonHold2>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10c      	bne.n	8001450 <fsm_manual_run+0x250>
				if (duration_for_yellow>= 99){
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <fsm_manual_run+0x2a4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b62      	cmp	r3, #98	; 0x62
 800143c:	dd03      	ble.n	8001446 <fsm_manual_run+0x246>
					duration_for_yellow = 99;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <fsm_manual_run+0x2a4>)
 8001440:	2263      	movs	r2, #99	; 0x63
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e004      	b.n	8001450 <fsm_manual_run+0x250>
				}
				else{
					duration_for_yellow++;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <fsm_manual_run+0x2a4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <fsm_manual_run+0x2a4>)
 800144e:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonPressed3() == 1){
 8001450:	f7fe fec4 	bl	80001dc <isButtonPressed3>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d103      	bne.n	8001462 <fsm_manual_run+0x262>
				duration_yellow_LR_modify = duration_for_yellow;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <fsm_manual_run+0x2a4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <fsm_manual_run+0x290>)
 8001460:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed1() == 1){
 8001462:	f7fe fe97 	bl	8000194 <isButtonPressed1>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	f040 808e 	bne.w	800158a <fsm_manual_run+0x38a>
				status = GREEN_MODE;
 800146e:	4b02      	ldr	r3, [pc, #8]	; (8001478 <fsm_manual_run+0x278>)
 8001470:	220f      	movs	r2, #15
 8001472:	601a      	str	r2, [r3, #0]
			}
			break;
 8001474:	e089      	b.n	800158a <fsm_manual_run+0x38a>
 8001476:	bf00      	nop
 8001478:	200000a0 	.word	0x200000a0
 800147c:	40010800 	.word	0x40010800
 8001480:	20000048 	.word	0x20000048
 8001484:	200000dc 	.word	0x200000dc
 8001488:	2000004c 	.word	0x2000004c
 800148c:	200000d4 	.word	0x200000d4
 8001490:	20000050 	.word	0x20000050
 8001494:	200000d8 	.word	0x200000d8
 8001498:	2000003c 	.word	0x2000003c
 800149c:	200000ac 	.word	0x200000ac
 80014a0:	2000009c 	.word	0x2000009c
 80014a4:	20000040 	.word	0x20000040
		case GREEN_MODE: // Trang thai dieu chinh den xanh
			updateBuffer1(duration_for_green, 3);
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <fsm_manual_run+0x394>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2103      	movs	r1, #3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc30 	bl	8000d14 <updateBuffer1>
			if (timer2_flag == 1){
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <fsm_manual_run+0x398>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d12d      	bne.n	8001518 <fsm_manual_run+0x318>
						count1++;
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <fsm_manual_run+0x39c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a36      	ldr	r2, [pc, #216]	; (800159c <fsm_manual_run+0x39c>)
 80014c4:	6013      	str	r3, [r2, #0]
						setTimer2(250);
 80014c6:	20fa      	movs	r0, #250	; 0xfa
 80014c8:	f000 f9c4 	bl	8001854 <setTimer2>
						HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port,LED_RED_LR_Pin, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2110      	movs	r1, #16
 80014d0:	4833      	ldr	r0, [pc, #204]	; (80015a0 <fsm_manual_run+0x3a0>)
 80014d2:	f000 fdba 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin,0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2120      	movs	r1, #32
 80014da:	4831      	ldr	r0, [pc, #196]	; (80015a0 <fsm_manual_run+0x3a0>)
 80014dc:	f000 fdb5 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_RED_UD_GPIO_Port,LED_RED_UD_Pin, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	482e      	ldr	r0, [pc, #184]	; (80015a0 <fsm_manual_run+0x3a0>)
 80014e6:	f000 fdb0 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_UD_GPIO_Port, LED_YELLOW_UD_Pin,0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f0:	482b      	ldr	r0, [pc, #172]	; (80015a0 <fsm_manual_run+0x3a0>)
 80014f2:	f000 fdaa 	bl	800204a <HAL_GPIO_WritePin>
						HAL_GPIO_TogglePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin);
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4829      	ldr	r0, [pc, #164]	; (80015a0 <fsm_manual_run+0x3a0>)
 80014fa:	f000 fdbe 	bl	800207a <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(LED_GREEN_UD_GPIO_Port, LED_GREEN_UD_Pin);
 80014fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001502:	4827      	ldr	r0, [pc, #156]	; (80015a0 <fsm_manual_run+0x3a0>)
 8001504:	f000 fdb9 	bl	800207a <HAL_GPIO_TogglePin>
						update7SEG1(index_led1++);
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <fsm_manual_run+0x3a4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	4925      	ldr	r1, [pc, #148]	; (80015a4 <fsm_manual_run+0x3a4>)
 8001510:	600a      	str	r2, [r1, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fdd2 	bl	80010bc <update7SEG1>
				}
			if (isButtonPressed2() == 1){
 8001518:	f7fe fe4e 	bl	80001b8 <isButtonPressed2>
 800151c:	4603      	mov	r3, r0
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10b      	bne.n	800153a <fsm_manual_run+0x33a>
						if (duration_for_green >= 99){
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <fsm_manual_run+0x394>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b62      	cmp	r3, #98	; 0x62
 8001528:	dd02      	ble.n	8001530 <fsm_manual_run+0x330>
							duration_for_green = 99;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <fsm_manual_run+0x394>)
 800152c:	2263      	movs	r2, #99	; 0x63
 800152e:	601a      	str	r2, [r3, #0]
						}
						duration_for_green++;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <fsm_manual_run+0x394>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <fsm_manual_run+0x394>)
 8001538:	6013      	str	r3, [r2, #0]
			}
			if(isButtonHold2() == 1){
 800153a:	f7fe fe61 	bl	8000200 <isButtonHold2>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10c      	bne.n	800155e <fsm_manual_run+0x35e>
				if (duration_for_green>= 99){
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <fsm_manual_run+0x394>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b62      	cmp	r3, #98	; 0x62
 800154a:	dd03      	ble.n	8001554 <fsm_manual_run+0x354>
					duration_for_green = 99;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <fsm_manual_run+0x394>)
 800154e:	2263      	movs	r2, #99	; 0x63
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e004      	b.n	800155e <fsm_manual_run+0x35e>
				}
				else{
					duration_for_green++;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <fsm_manual_run+0x394>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <fsm_manual_run+0x394>)
 800155c:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonPressed3() == 1){
 800155e:	f7fe fe3d 	bl	80001dc <isButtonPressed3>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d103      	bne.n	8001570 <fsm_manual_run+0x370>
				duration_green_LR_modify = duration_for_green;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <fsm_manual_run+0x394>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <fsm_manual_run+0x3a8>)
 800156e:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed1() == 1){
 8001570:	f7fe fe10 	bl	8000194 <isButtonPressed1>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d109      	bne.n	800158e <fsm_manual_run+0x38e>
				status = NORMAL_MODE;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <fsm_manual_run+0x3ac>)
 800157c:	220c      	movs	r2, #12
 800157e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001580:	e005      	b.n	800158e <fsm_manual_run+0x38e>
		default:
			break;
 8001582:	bf00      	nop
 8001584:	e004      	b.n	8001590 <fsm_manual_run+0x390>
		    break;
 8001586:	bf00      	nop
 8001588:	e002      	b.n	8001590 <fsm_manual_run+0x390>
			break;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <fsm_manual_run+0x390>
			break;
 800158e:	bf00      	nop
}
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000044 	.word	0x20000044
 8001598:	200000ac 	.word	0x200000ac
 800159c:	20000098 	.word	0x20000098
 80015a0:	40010800 	.word	0x40010800
 80015a4:	2000009c 	.word	0x2000009c
 80015a8:	2000004c 	.word	0x2000004c
 80015ac:	200000a0 	.word	0x200000a0

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f000 fa48 	bl	8001a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f814 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f000 f89a 	bl	80016f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015c0:	f000 f84c 	bl	800165c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <main+0x2c>)
 80015c6:	f001 f9a9 	bl	800291c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT; // set status bang INIT
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <main+0x30>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_manual_run();
 80015d0:	f7ff fe16 	bl	8001200 <fsm_manual_run>
	  fsm_automatic_run();
 80015d4:	f7ff f996 	bl	8000904 <fsm_automatic_run>
	  fsm_manual_run();
 80015d8:	e7fa      	b.n	80015d0 <main+0x20>
 80015da:	bf00      	nop
 80015dc:	200000ec 	.word	0x200000ec
 80015e0:	200000a0 	.word	0x200000a0

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fd4a 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160e:	2310      	movs	r3, #16
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd46 	bl	80020ac <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001626:	f000 f8f5 	bl	8001814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f000 ffb2 	bl	80025ac <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800164e:	f000 f8e1 	bl	8001814 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3740      	adds	r7, #64	; 0x40
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_TIM2_Init+0x94>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001682:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_TIM2_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001690:	2209      	movs	r2, #9
 8001692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_TIM2_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016a2:	f001 f8eb 	bl	800287c <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016ac:	f000 f8b2 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016be:	f001 fa81 	bl	8002bc4 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016c8:	f000 f8a4 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016da:	f001 fc49 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f896 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000ec 	.word	0x200000ec

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <MX_GPIO_Init+0xec>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a34      	ldr	r2, [pc, #208]	; (80017e0 <MX_GPIO_Init+0xec>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <MX_GPIO_Init+0xec>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <MX_GPIO_Init+0xec>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <MX_GPIO_Init+0xec>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_GPIO_Init+0xec>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_GPIO_Init+0xec>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <MX_GPIO_Init+0xec>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_GPIO_Init+0xec>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_LR_Pin|LED_YELLOW_LR_Pin|LED_GREEN_LR_Pin|LED_RED_UD_Pin
 8001750:	2200      	movs	r2, #0
 8001752:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8001756:	4823      	ldr	r0, [pc, #140]	; (80017e4 <MX_GPIO_Init+0xf0>)
 8001758:	f000 fc77 	bl	800204a <HAL_GPIO_WritePin>
                          |LED_YELLOW_UD_Pin|LED_GREEN_UD_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_a_Pin|SEG1_b_Pin|SEG1_c_Pin|SEG2_d_Pin
 800175c:	2200      	movs	r2, #0
 800175e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001762:	4821      	ldr	r0, [pc, #132]	; (80017e8 <MX_GPIO_Init+0xf4>)
 8001764:	f000 fc71 	bl	800204a <HAL_GPIO_WritePin>
                          |SEG2_e_Pin|SEG2_f_Pin|SEG2_g_Pin|SEG1_d_Pin
                          |SEG1_e_Pin|SEG1_f_Pin|SEG1_g_Pin|SEG2_a_Pin
                          |SEG2_b_Pin|SEG2_c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001772:	2301      	movs	r3, #1
 8001774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	481b      	ldr	r0, [pc, #108]	; (80017ec <MX_GPIO_Init+0xf8>)
 800177e:	f000 fad3 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_LR_Pin LED_YELLOW_LR_Pin LED_GREEN_LR_Pin LED_RED_UD_Pin
                           LED_YELLOW_UD_Pin LED_GREEN_UD_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_RED_LR_Pin|LED_YELLOW_LR_Pin|LED_GREEN_LR_Pin|LED_RED_UD_Pin
 8001782:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8001786:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_UD_Pin|LED_GREEN_UD_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_GPIO_Init+0xf0>)
 800179c:	f000 fac4 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_a_Pin SEG1_b_Pin SEG1_c_Pin SEG2_d_Pin
                           SEG2_e_Pin SEG2_f_Pin SEG2_g_Pin SEG1_d_Pin
                           SEG1_e_Pin SEG1_f_Pin SEG1_g_Pin SEG2_a_Pin
                           SEG2_b_Pin SEG2_c_Pin */
  GPIO_InitStruct.Pin = SEG1_a_Pin|SEG1_b_Pin|SEG1_c_Pin|SEG2_d_Pin
 80017a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80017a4:	613b      	str	r3, [r7, #16]
                          |SEG2_e_Pin|SEG2_f_Pin|SEG2_g_Pin|SEG1_d_Pin
                          |SEG1_e_Pin|SEG1_f_Pin|SEG1_g_Pin|SEG2_a_Pin
                          |SEG2_b_Pin|SEG2_c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <MX_GPIO_Init+0xf4>)
 80017ba:	f000 fab5 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 80017be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0xf4>)
 80017d4:	f000 faa8 	bl	8001d28 <HAL_GPIO_Init>

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40011000 	.word	0x40011000

080017f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	// Ham cap nhat timer
	timerRun1();
 80017f8:	f000 f846 	bl	8001888 <timerRun1>
	timerRun2();
 80017fc:	f000 f85a 	bl	80018b4 <timerRun2>
	// Ham cap nhat trang thai button
	getKeyInput1();
 8001800:	f7fe fd6e 	bl	80002e0 <getKeyInput1>
	getKeyInput2();
 8001804:	f7fe fd0e 	bl	8000224 <getKeyInput2>
	getKeyInput3();
 8001808:	f7fe fdb8 	bl	800037c <getKeyInput3>

}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <setTimer1>:
int timer1_counter = 0;
int timer2_flag = 0;
int timer2_counter = 0;
int Timer_Cycle = 10;
// Set thoi gian cho timer
void setTimer1(int duration) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_Cycle;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <setTimer1+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <setTimer1+0x2c>)
 8001834:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <setTimer1+0x30>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000054 	.word	0x20000054
 800184c:	200000a8 	.word	0x200000a8
 8001850:	200000a4 	.word	0x200000a4

08001854 <setTimer2>:
void setTimer2(int duration) {
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/Timer_Cycle;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <setTimer2+0x28>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	fb92 f3f3 	sdiv	r3, r2, r3
 8001866:	4a06      	ldr	r2, [pc, #24]	; (8001880 <setTimer2+0x2c>)
 8001868:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <setTimer2+0x30>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000054 	.word	0x20000054
 8001880:	200000b0 	.word	0x200000b0
 8001884:	200000ac 	.word	0x200000ac

08001888 <timerRun1>:
// Dem nguoc timer
void timerRun1() {
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
		timer1_counter--;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <timerRun1+0x24>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	4a06      	ldr	r2, [pc, #24]	; (80018ac <timerRun1+0x24>)
 8001894:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <timerRun1+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dc02      	bgt.n	80018a4 <timerRun1+0x1c>
			timer1_flag = 1;
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <timerRun1+0x28>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
		}
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200000a8 	.word	0x200000a8
 80018b0:	200000a4 	.word	0x200000a4

080018b4 <timerRun2>:
void timerRun2(){
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
			timer2_counter--;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <timerRun2+0x24>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <timerRun2+0x24>)
 80018c0:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0) {
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <timerRun2+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dc02      	bgt.n	80018d0 <timerRun2+0x1c>
				timer2_flag = 1;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <timerRun2+0x28>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
			}
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	200000b0 	.word	0x200000b0
 80018dc:	200000ac 	.word	0x200000ac

080018e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a14      	ldr	r2, [pc, #80]	; (800193c <HAL_MspInit+0x5c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_MspInit+0x5c>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_MspInit+0x5c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_MspInit+0x5c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_MspInit+0x60>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_MspInit+0x60>)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d113      	bne.n	800197e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_TIM_Base_MspInit+0x44>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_TIM_Base_MspInit+0x44>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_TIM_Base_MspInit+0x44>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201c      	movs	r0, #28
 8001974:	f000 f9a1 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001978:	201c      	movs	r0, #28
 800197a:	f000 f9ba 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d2:	f000 f87f 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM2_IRQHandler+0x10>)
 80019e2:	f000 ffe7 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000ec 	.word	0x200000ec

080019f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a22:	f7ff ffe5 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f001 fb0d 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2a:	f7ff fdc1 	bl	80015b0 <main>
  bx lr
 8001a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a38:	080030dc 	.word	0x080030dc
  ldr r2, =_sbss
 8001a3c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a40:	20000138 	.word	0x20000138

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x28>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x28>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f923 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff ff3c 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f93b 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 f903 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000058 	.word	0x20000058
 8001acc:	20000060 	.word	0x20000060
 8001ad0:	2000005c 	.word	0x2000005c

08001ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x1c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_IncTick+0x20>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_IncTick+0x20>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000060 	.word	0x20000060
 8001af4:	20000134 	.word	0x20000134

08001af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <HAL_GetTick+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000134 	.word	0x20000134

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4906      	ldr	r1, [pc, #24]	; (8001ba4 <__NVIC_EnableIRQ+0x34>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff90 	bl	8001ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff2d 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff42 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff90 	bl	8001bfc <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5f 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff35 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e148      	b.n	8001fce <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8137 	bne.w	8001fc8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4aa3      	ldr	r2, [pc, #652]	; (8001fec <HAL_GPIO_Init+0x2c4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d05e      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d64:	4aa1      	ldr	r2, [pc, #644]	; (8001fec <HAL_GPIO_Init+0x2c4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d875      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d6a:	4aa1      	ldr	r2, [pc, #644]	; (8001ff0 <HAL_GPIO_Init+0x2c8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d058      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d70:	4a9f      	ldr	r2, [pc, #636]	; (8001ff0 <HAL_GPIO_Init+0x2c8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d86f      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d76:	4a9f      	ldr	r2, [pc, #636]	; (8001ff4 <HAL_GPIO_Init+0x2cc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d052      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a9d      	ldr	r2, [pc, #628]	; (8001ff4 <HAL_GPIO_Init+0x2cc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d869      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d82:	4a9d      	ldr	r2, [pc, #628]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04c      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d88:	4a9b      	ldr	r2, [pc, #620]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d863      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a9b      	ldr	r2, [pc, #620]	; (8001ffc <HAL_GPIO_Init+0x2d4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d046      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d94:	4a99      	ldr	r2, [pc, #612]	; (8001ffc <HAL_GPIO_Init+0x2d4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d85d      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d82a      	bhi.n	8001df4 <HAL_GPIO_Init+0xcc>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d859      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_GPIO_Init+0x80>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001e23 	.word	0x08001e23
 8001dac:	08001dfd 	.word	0x08001dfd
 8001db0:	08001e0f 	.word	0x08001e0f
 8001db4:	08001e51 	.word	0x08001e51
 8001db8:	08001e57 	.word	0x08001e57
 8001dbc:	08001e57 	.word	0x08001e57
 8001dc0:	08001e57 	.word	0x08001e57
 8001dc4:	08001e57 	.word	0x08001e57
 8001dc8:	08001e57 	.word	0x08001e57
 8001dcc:	08001e57 	.word	0x08001e57
 8001dd0:	08001e57 	.word	0x08001e57
 8001dd4:	08001e57 	.word	0x08001e57
 8001dd8:	08001e57 	.word	0x08001e57
 8001ddc:	08001e57 	.word	0x08001e57
 8001de0:	08001e57 	.word	0x08001e57
 8001de4:	08001e57 	.word	0x08001e57
 8001de8:	08001e57 	.word	0x08001e57
 8001dec:	08001e05 	.word	0x08001e05
 8001df0:	08001e19 	.word	0x08001e19
 8001df4:	4a82      	ldr	r2, [pc, #520]	; (8002000 <HAL_GPIO_Init+0x2d8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfa:	e02c      	b.n	8001e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e029      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e024      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	3308      	adds	r3, #8
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e01f      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e01a      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e013      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	611a      	str	r2, [r3, #16]
          break;
 8001e42:	e009      	b.n	8001e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	615a      	str	r2, [r3, #20]
          break;
 8001e4e:	e003      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          break;
 8001e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d801      	bhi.n	8001e62 <HAL_GPIO_Init+0x13a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_Init+0x13e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d802      	bhi.n	8001e74 <HAL_GPIO_Init+0x14c>
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x152>
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3b08      	subs	r3, #8
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	210f      	movs	r1, #15
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8090 	beq.w	8001fc8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a55      	ldr	r2, [pc, #340]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <HAL_GPIO_Init+0x2e0>)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_GPIO_Init+0x2e4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00d      	beq.n	8001f08 <HAL_GPIO_Init+0x1e0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_GPIO_Init+0x2e8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <HAL_GPIO_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_GPIO_Init+0x2ec>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_GPIO_Init+0x1d8>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1e2>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1e2>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1e2>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	493b      	ldr	r1, [pc, #236]	; (8002008 <HAL_GPIO_Init+0x2e0>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4937      	ldr	r1, [pc, #220]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f42:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4933      	ldr	r1, [pc, #204]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	492d      	ldr	r1, [pc, #180]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4929      	ldr	r1, [pc, #164]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4923      	ldr	r1, [pc, #140]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4919      	ldr	r1, [pc, #100]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4915      	ldr	r1, [pc, #84]	; (8002018 <HAL_GPIO_Init+0x2f0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3301      	adds	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f aeaf 	bne.w	8001d3c <HAL_GPIO_Init+0x14>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	372c      	adds	r7, #44	; 0x2c
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	10320000 	.word	0x10320000
 8001ff0:	10310000 	.word	0x10310000
 8001ff4:	10220000 	.word	0x10220000
 8001ff8:	10210000 	.word	0x10210000
 8001ffc:	10120000 	.word	0x10120000
 8002000:	10110000 	.word	0x10110000
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000
 800200c:	40010800 	.word	0x40010800
 8002010:	40010c00 	.word	0x40010c00
 8002014:	40011000 	.word	0x40011000
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	807b      	strh	r3, [r7, #2]
 8002056:	4613      	mov	r3, r2
 8002058:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205a:	787b      	ldrb	r3, [r7, #1]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002066:	e003      	b.n	8002070 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	041a      	lsls	r2, r3, #16
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43d9      	mvns	r1, r3
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	400b      	ands	r3, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e26c      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020cc:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d00c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d8:	4b8f      	ldr	r3, [pc, #572]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d112      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
 80020e4:	4b8c      	ldr	r3, [pc, #560]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x12c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d168      	bne.n	80021d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e246      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x76>
 8002114:	4b80      	ldr	r3, [pc, #512]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7f      	ldr	r2, [pc, #508]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e02e      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b78      	ldr	r3, [pc, #480]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a77      	ldr	r2, [pc, #476]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0xbc>
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a71      	ldr	r2, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6e      	ldr	r2, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a67      	ldr	r2, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fcb6 	bl	8001af8 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff fcb2 	bl	8001af8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1fa      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0xe4>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fca2 	bl	8001af8 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff fc9e 	bl	8001af8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1e6      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x10c>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d063      	beq.n	80022ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d11c      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1ba      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4939      	ldr	r1, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	e03a      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x270>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff fc57 	bl	8001af8 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fc53 	bl	8001af8 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e19b      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4927      	ldr	r1, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_RCC_OscConfig+0x270>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fc36 	bl	8001af8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7ff fc32 	bl	8001af8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e17a      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03a      	beq.n	8002330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_RCC_OscConfig+0x274>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fc16 	bl	8001af8 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7ff fc12 	bl	8001af8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e15a      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 faa6 	bl	8002840 <RCC_Delay>
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fbfc 	bl	8001af8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fbf8 	bl	8001af8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d908      	bls.n	8002324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e140      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	42420000 	.word	0x42420000
 8002320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b9e      	ldr	r3, [pc, #632]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e9      	bne.n	8002304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a6 	beq.w	800248a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a93      	ldr	r2, [pc, #588]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a8a      	ldr	r2, [pc, #552]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7ff fbb9 	bl	8001af8 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7ff fbb5 	bl	8001af8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0fd      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x312>
 80023b0:	4b7b      	ldr	r3, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a7a      	ldr	r2, [pc, #488]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e02d      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x334>
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a75      	ldr	r2, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a72      	ldr	r2, [pc, #456]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x356>
 80023e8:	4b6d      	ldr	r3, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a6c      	ldr	r2, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 8002402:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a66      	ldr	r2, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b64      	ldr	r3, [pc, #400]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff fb69 	bl	8001af8 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fb65 	bl	8001af8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0ab      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x37e>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff fb53 	bl	8001af8 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff fb4f 	bl	8001af8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e095      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a47      	ldr	r2, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8081 	beq.w	8002596 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002494:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d061      	beq.n	8002564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d146      	bne.n	8002536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_RCC_OscConfig+0x4fc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7ff fb23 	bl	8001af8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff fb1f 	bl	8001af8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e067      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	492d      	ldr	r1, [pc, #180]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a19      	ldr	r1, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	430b      	orrs	r3, r1
 8002502:	4927      	ldr	r1, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x4fc>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff faf3 	bl	8001af8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff faef 	bl	8001af8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e037      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x46a>
 8002534:	e02f      	b.n	8002596 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_RCC_OscConfig+0x4fc>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fadc 	bl	8001af8 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7ff fad8 	bl	8001af8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e020      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x498>
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e013      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42420060 	.word	0x42420060

080025ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4965      	ldr	r1, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d040      	beq.n	80026cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d115      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e073      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7ff fa2c 	bl	8001af8 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7ff fa28 	bl	8001af8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e053      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1cc>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1d0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f98a 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	080030c4 	.word	0x080030c4
 8002778:	20000058 	.word	0x20000058
 800277c:	2000005c 	.word	0x2000005c

08002780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b490      	push	{r4, r7}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002788:	1d3c      	adds	r4, r7, #4
 800278a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800278c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002790:	f240 2301 	movw	r3, #513	; 0x201
 8002794:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x46>
 80027be:	e02d      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c2:	623b      	str	r3, [r7, #32]
      break;
 80027c4:	e02d      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027d2:	4413      	add	r3, r2
 80027d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c5b      	lsrs	r3, r3, #17
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027f2:	4413      	add	r3, r2
 80027f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	fb02 f203 	mul.w	r2, r2, r3
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e004      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	623b      	str	r3, [r7, #32]
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6a3b      	ldr	r3, [r7, #32]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bc90      	pop	{r4, r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	080030b4 	.word	0x080030b4
 8002834:	40021000 	.word	0x40021000
 8002838:	007a1200 	.word	0x007a1200
 800283c:	003d0900 	.word	0x003d0900

08002840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <RCC_Delay+0x34>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <RCC_Delay+0x38>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800285c:	bf00      	nop
  }
  while (Delay --);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <RCC_Delay+0x1c>
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000058 	.word	0x20000058
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff f84e 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fa6a 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e035      	b.n	80029a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a16      	ldr	r2, [pc, #88]	; (80029ac <HAL_TIM_Base_Start_IT+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_TIM_Base_Start_IT+0x4e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d004      	beq.n	800296a <HAL_TIM_Base_Start_IT+0x4e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d010      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	e007      	b.n	800299e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40000400 	.word	0x40000400

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9b1 	bl	8002d5e <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9a4 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9b3 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f987 	bl	8002d5e <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f97a 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f989 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f95d 	bl	8002d5e <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f950 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f95f 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f933 	bl	8002d5e <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f926 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f935 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fe5c 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa67 	bl	8003032 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f8f9 	bl	8002d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0220 	mvn.w	r2, #32
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa32 	bl	8003020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_ConfigClockSource+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0b3      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x180>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c14:	d03e      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0xd0>
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	f200 8087 	bhi.w	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	f000 8085 	beq.w	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d87f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c2c:	2b70      	cmp	r3, #112	; 0x70
 8002c2e:	d01a      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xa2>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d87b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c34:	2b60      	cmp	r3, #96	; 0x60
 8002c36:	d050      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x116>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d877      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c3c:	2b50      	cmp	r3, #80	; 0x50
 8002c3e:	d03c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xf6>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d873      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d058      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x136>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d86f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c4c:	2b30      	cmp	r3, #48	; 0x30
 8002c4e:	d064      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x156>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d86b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d060      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x156>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d867      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05c      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x156>
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d05a      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c64:	e062      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f000 f95c 	bl	8002f32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	609a      	str	r2, [r3, #8]
      break;
 8002c92:	e04e      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f000 f945 	bl	8002f32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb6:	609a      	str	r2, [r3, #8]
      break;
 8002cb8:	e03b      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f000 f8bc 	bl	8002e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2150      	movs	r1, #80	; 0x50
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f913 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e02b      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f000 f8da 	bl	8002ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2160      	movs	r1, #96	; 0x60
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f903 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e01b      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f000 f89c 	bl	8002e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f8f3 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002d18:	e00b      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 f8ea 	bl	8002efe <TIM_ITRx_SetConfig>
        break;
 8002d2a:	e002      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <TIM_Base_SetConfig+0xa8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0x28>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0x28>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <TIM_Base_SetConfig+0xac>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d108      	bne.n	8002dce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <TIM_Base_SetConfig+0xa8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_Base_SetConfig+0x52>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d003      	beq.n	8002de6 <TIM_Base_SetConfig+0x52>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <TIM_Base_SetConfig+0xac>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <TIM_Base_SetConfig+0xa8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400

08002e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f023 030a 	bic.w	r3, r3, #10
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f023 0210 	bic.w	r2, r3, #16
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	031b      	lsls	r3, r3, #12
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f043 0307 	orr.w	r3, r3, #7
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	021a      	lsls	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	609a      	str	r2, [r3, #8]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e041      	b.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a14      	ldr	r2, [pc, #80]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10c      	bne.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400

08003020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	; (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	f000 f822 	bl	800309c <_init>
 8003058:	2600      	movs	r6, #0
 800305a:	4d0a      	ldr	r5, [pc, #40]	; (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f855 3b04 	ldr.w	r3, [r5], #4
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f855 3b04 	ldr.w	r3, [r5], #4
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	080030d4 	.word	0x080030d4
 8003080:	080030d4 	.word	0x080030d4
 8003084:	080030d4 	.word	0x080030d4
 8003088:	080030d8 	.word	0x080030d8

0800308c <memset>:
 800308c:	4603      	mov	r3, r0
 800308e:	4402      	add	r2, r0
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	f803 1b01 	strb.w	r1, [r3], #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
